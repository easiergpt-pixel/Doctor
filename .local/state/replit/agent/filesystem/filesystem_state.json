{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI Receptionist Platform\n\n## Overview\n\nThis is a full-stack AI receptionist platform that enables businesses to automate customer communications across multiple channels (WhatsApp, Facebook, Instagram, website chat, Telegram). The system provides intelligent conversation handling, appointment booking capabilities, customer management, and real-time analytics. Built with modern web technologies, it features a responsive dashboard for business owners to monitor and manage their AI receptionist operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Progress (September 2025)\n\n### Completed Features\n- ✅ **Complete Booking Confirmation Workflow**: AI checks owner availability, proposes time slots, customer chooses, owner approves/rejects\n- ✅ **Schedule Settings System**: Weekly availability management, custom time slots, blackout dates\n- ✅ **Booking Approval Interface**: Review pending bookings with full customer context and actions\n- ✅ **AI Customer Notifications**: Automated responses sent to customers via original channels (Telegram working)\n- ✅ **Enhanced UI Features**: Reschedule dialog with date/time picker, dark mode toggle, improved sidebar navigation\n- ✅ **Multilingual Support**: Full Azerbaijani language support with cultural context\n\n### Key Workflows Implemented\n1. **Customer Booking Flow**: Customer writes to AI → AI checks available slots → AI proposes options → Customer chooses → Owner gets notification\n2. **Owner Approval Flow**: Owner reviews booking in Approvals page → Approve/Reject/Reschedule with comments → AI automatically notifies customer\n3. **Schedule Management**: Set weekly availability, manage time slots, add blackout dates\n\n### Technical Achievements\n- Complete notification service with Telegram API integration\n- Real-time booking status updates\n- Smart availability checking with existing bookings consideration\n- Comprehensive booking confirmation database schema\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **UI Components**: Shadcn/ui components built on Radix UI primitives for accessible, customizable design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js for RESTful API endpoints\n- **Language**: TypeScript for end-to-end type safety\n- **Authentication**: Replit Auth with OpenID Connect for secure user authentication\n- **Session Management**: Express sessions with PostgreSQL storage for scalable session handling\n- **Real-time Communication**: WebSocket server for live conversation updates and notifications\n\n### Database Architecture\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Design**: Relational model with users, customers, conversations, messages, bookings, channels, and AI training data\n- **Connection**: Neon serverless PostgreSQL for scalable cloud database hosting\n- **Migrations**: Drizzle Kit for database schema management and migrations\n\n### AI Integration\n- **Provider**: OpenAI GPT-5 for natural language processing and conversation handling\n- **Capabilities**: Intelligent response generation, appointment booking detection, and context-aware conversations\n- **Training**: Custom AI training data per business for personalized responses\n- **Response Processing**: Structured AI responses with confidence scoring and action detection\n\n### Real-time Features\n- **WebSocket Service**: Custom implementation for live conversation monitoring\n- **Client Management**: Connection pooling and user authentication for real-time updates\n- **Event Broadcasting**: Real-time notifications for new messages, bookings, and status changes\n\n## External Dependencies\n\n### Payment Processing\n- **Stripe**: Complete payment processing with subscription management and billing\n- **Components**: React Stripe.js for secure payment form handling\n- **Webhooks**: Stripe webhook processing for subscription status updates\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database queries and schema management\n- **Connect PG Simple**: PostgreSQL session store for Express sessions\n\n### Authentication\n- **Replit Auth**: OpenID Connect authentication provider\n- **Passport.js**: Authentication middleware for Express\n- **Session Storage**: PostgreSQL-backed session management\n\n### AI Services\n- **OpenAI API**: GPT-5 model for conversation processing and response generation\n- **Custom Training**: Business-specific AI training data storage and retrieval\n\n### Development Tools\n- **Vite**: Frontend build tool with hot module replacement\n- **TypeScript**: Static type checking across the entire stack\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **Replit Development**: Integrated development environment with runtime error handling\n\n### UI Libraries\n- **Radix UI**: Accessible component primitives for form controls and interactive elements\n- **Lucide React**: Consistent icon library for UI elements\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Type-safe CSS class composition","size_bytes":5507},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-out\",\n        \"pulse\": \"pulse 2s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3276},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure WebSocket for serverless environment\nif (typeof globalThis.WebSocket === 'undefined') {\n  neonConfig.webSocketConstructor = ws;\n} else {\n  neonConfig.webSocketConstructor = globalThis.WebSocket;\n}\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":654},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { reminderService } from \"./services/reminderService\";\nimport { notifyCustomerOfBookingAction } from \"./services/notificationService\";\nimport { generateAIResponse } from \"./services/openai\";\nimport { RealtimeService } from \"./services/websocket\";\nimport { insertMessageSchema, insertBookingSchema, insertChannelSchema, insertAiTrainingSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  const httpServer = createServer(app);\n  const realtimeService = new RealtimeService(httpServer);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const conversations = await storage.getConversationsByUser(userId);\n      const bookings = await storage.getBookingsByUser(userId);\n      const todaysBookings = await storage.getTodaysBookings(userId);\n      const usage = await storage.getTodaysUsage(userId);\n\n      const stats = {\n        totalConversations: conversations.length,\n        bookingsMade: bookings.filter(b => b.status === 'confirmed').length,\n        avgResponseTime: \"2.3s\", // This would be calculated from actual response times\n        satisfactionRate: \"94%\", // This would come from customer feedback\n        todaysBookings: todaysBookings.length,\n        tokensUsed: usage?.tokensUsed || 0,\n        cost: usage?.cost || \"0.00\",\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Channel stats - conversation count by channel type\n  app.get('/api/channels/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getConversationsByUser(userId);\n      \n      // Count conversations by channel type for today\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const channelStats: Record<string, number> = {};\n      \n      for (const conv of conversations) {\n        const channel = await storage.getChannel(conv.channel);\n        const channelType = channel?.type || 'website';\n        \n        // Count conversations from today\n        if (conv.createdAt) {\n          const convDate = new Date(conv.createdAt);\n          if (convDate >= today) {\n            channelStats[channelType] = (channelStats[channelType] || 0) + 1;\n          }\n        }\n      }\n      \n      res.json(channelStats);\n    } catch (error) {\n      console.error(\"Error fetching channel stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch channel stats\" });\n    }\n  });\n\n  // Conversations\n  app.get('/api/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getConversationsByUser(userId);\n      \n      // Enrich conversations with channel information\n      const enrichedConversations = await Promise.all(conversations.map(async (conv) => {\n        const channel = await storage.getChannel(conv.channel);\n        return {\n          ...conv,\n          channelName: channel?.name || 'Unknown',\n          channelType: channel?.type || 'unknown',\n          channel: channel?.type || conv.channel // Use channel type for display\n        };\n      }));\n      \n      res.json(enrichedConversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get('/api/conversations/active', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getActiveConversations(userId);\n      \n      // Enrich conversations with channel information\n      const enrichedConversations = await Promise.all(conversations.map(async (conv) => {\n        const channel = await storage.getChannel(conv.channel);\n        return {\n          ...conv,\n          channelName: channel?.name || 'Unknown',\n          channelType: channel?.type || 'unknown',\n          channel: channel?.type || conv.channel // Use channel type for display\n        };\n      }));\n      \n      res.json(enrichedConversations);\n    } catch (error) {\n      console.error(\"Error fetching active conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch active conversations\" });\n    }\n  });\n\n  // Get single conversation\n  app.get('/api/conversations/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user.claims.sub;\n      \n      const conversation = await storage.getConversation(id);\n      if (!conversation || conversation.userId !== userId) {\n        return res.status(404).json({ message: 'Conversation not found' });\n      }\n      \n      // Enrich with channel information\n      const channel = await storage.getChannel(conversation.channel);\n      const enrichedConversation = {\n        ...conversation,\n        channelName: channel?.name || 'Unknown',\n        channelType: channel?.type || 'unknown',\n        channel: channel?.type || conversation.channel // Use channel type for display\n      };\n      \n      res.json(enrichedConversation);\n    } catch (error) {\n      console.error('Error fetching conversation:', error);\n      res.status(500).json({ message: 'Failed to fetch conversation' });\n    }\n  });\n\n  app.get('/api/conversations/:id/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getMessagesByConversation(id);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Chat endpoint for AI responses\n  app.post('/api/chat', async (req, res) => {\n    try {\n      const { message, conversationId, channel, customerIdentifier } = req.body;\n      \n      if (!message || !conversationId) {\n        return res.status(400).json({ message: \"Message and conversation ID required\" });\n      }\n\n      // For now, we'll get userId from conversation or create a demo response\n      const conversation = await storage.getConversation(conversationId);\n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n\n      // Get conversation history\n      const messages = await storage.getMessagesByConversation(conversationId);\n      const conversationHistory = messages.map(m => ({\n        role: m.sender === 'customer' ? 'user' as const : 'assistant' as const,\n        content: m.content,\n      }));\n\n      // Store customer message\n      await storage.createMessage({\n        conversationId,\n        content: message,\n        sender: 'customer',\n        metadata: { channel, customerIdentifier },\n      });\n\n      // Generate AI response\n      const aiResponse = await generateAIResponse(\n        conversation.userId,\n        message,\n        conversationHistory\n      );\n\n      // Store AI response\n      await storage.createMessage({\n        conversationId,\n        content: aiResponse.message,\n        sender: 'ai',\n        metadata: { action: aiResponse.action, confidence: aiResponse.confidence },\n      });\n\n      // Handle booking if needed\n      if (aiResponse.action === 'booking' && aiResponse.bookingData) {\n        const booking = await storage.createBooking({\n          userId: conversation.userId,\n          customerId: conversation.customerId,\n          conversationId,\n          service: aiResponse.bookingData.service,\n          dateTime: aiResponse.bookingData.preferredDateTime ? new Date(aiResponse.bookingData.preferredDateTime) : undefined,\n          status: 'pending',\n          notes: `Auto-created from chat. Customer: ${aiResponse.bookingData.customerName || 'Unknown'}`,\n        });\n\n        realtimeService.notifyBookingCreated(conversation.userId, booking);\n      }\n\n      res.json(aiResponse);\n    } catch (error) {\n      console.error(\"Error processing chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat\" });\n    }\n  });\n\n  // Start conversation endpoint for widget\n  app.post('/api/conversations/start', async (req, res) => {\n    try {\n      const { businessId, channel, customerIdentifier } = req.body;\n      \n      if (!businessId || !channel) {\n        return res.status(400).json({ message: \"Business ID and channel required\" });\n      }\n\n      // Find or create customer\n      let customer = await storage.getCustomerByIdentifier(businessId, customerIdentifier, channel);\n      if (!customer) {\n        customer = await storage.createCustomer({\n          userId: businessId,\n          name: \"Unknown Customer\",\n          source: channel,\n          metadata: { identifier: customerIdentifier },\n        });\n      }\n\n      // Create conversation\n      const conversation = await storage.createConversation({\n        userId: businessId,\n        customerId: customer.id,\n        channel,\n        status: 'active',\n        lastMessageAt: new Date(),\n      });\n\n      realtimeService.notifyNewConversation(businessId, conversation);\n\n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error starting conversation:\", error);\n      res.status(500).json({ message: \"Failed to start conversation\" });\n    }\n  });\n\n  // Bookings\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookings = await storage.getBookingsByUser(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get('/api/bookings/today', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookings = await storage.getTodaysBookings(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching today's bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch today's bookings\" });\n    }\n  });\n\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookingData = insertBookingSchema.parse({ ...req.body, userId });\n      \n      const booking = await storage.createBooking(bookingData);\n      realtimeService.notifyBookingCreated(userId, booking);\n      \n      // Automatically create reminders for the new booking\n      if (booking.id) {\n        await reminderService.createRemindersForBooking(booking.id);\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Customers\n  app.get('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customers = await storage.getCustomersByUser(userId);\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Channels\n  app.get('/api/channels', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const channels = await storage.getChannelsByUser(userId);\n      res.json(channels);\n    } catch (error) {\n      console.error(\"Error fetching channels:\", error);\n      res.status(500).json({ message: \"Failed to fetch channels\" });\n    }\n  });\n\n  app.put('/api/channels/:id/config', isAuthenticated, async (req: any, res) => {\n    try {\n      const channelId = req.params.id;\n      const { config } = req.body;\n      const userId = req.user.claims.sub;\n\n      // Verify the channel belongs to the user\n      const channel = await storage.getChannel(channelId);\n      if (!channel || channel.userId !== userId) {\n        return res.status(404).json({ message: \"Channel not found\" });\n      }\n\n      await storage.updateChannelConfig(channelId, config);\n      res.json({ message: \"Channel configuration updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating channel config:\", error);\n      res.status(500).json({ message: \"Failed to update channel configuration\" });\n    }\n  });\n\n  app.post('/api/channels', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const channelData = insertChannelSchema.parse({ ...req.body, userId });\n      \n      const channel = await storage.createChannel(channelData);\n      res.json(channel);\n    } catch (error) {\n      console.error(\"Error creating channel:\", error);\n      res.status(500).json({ message: \"Failed to create channel\" });\n    }\n  });\n\n  // AI Training\n  app.get('/api/ai-training', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const training = await storage.getAiTrainingByUser(userId);\n      res.json(training);\n    } catch (error) {\n      console.error(\"Error fetching AI training:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI training\" });\n    }\n  });\n\n  app.post('/api/ai-training', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const trainingData = insertAiTrainingSchema.parse({ ...req.body, userId });\n      \n      const training = await storage.createAiTraining(trainingData);\n      res.json(training);\n    } catch (error) {\n      console.error(\"Error creating AI training:\", error);\n      res.status(500).json({ message: \"Failed to create AI training\" });\n    }\n  });\n\n  // AI Settings\n  app.put('/api/ai-settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { preferredLanguage, aiPromptCustomization, aiLanguageInstructions } = req.body;\n\n      await storage.updateUserAISettings(userId, {\n        preferredLanguage,\n        aiPromptCustomization,\n        aiLanguageInstructions,\n      });\n\n      res.json({ message: \"AI settings updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating AI settings:\", error);\n      res.status(500).json({ message: \"Failed to update AI settings\" });\n    }\n  });\n\n  // Telegram Webhook Handler\n  app.post('/api/webhooks/telegram', async (req, res) => {\n    try {\n      // Process Telegram webhook\n      \n      const update = req.body;\n      \n      // Validate webhook has message\n      if (!update.message) {\n        console.log('No message in webhook update');\n        return res.status(200).send('OK');\n      }\n      \n      const message = update.message;\n      const chatId = message.chat.id.toString();\n      const messageText = message.text || '';\n      const firstName = message.from?.first_name || 'Unknown';\n      const lastName = message.from?.last_name || '';\n      const username = message.from?.username;\n      \n      if (!messageText) {\n        console.log('No text in message');\n        return res.status(200).send('OK');\n      }\n      \n      // Find the Telegram channel configuration\n      const channels = await storage.getChannelsByType('telegram');\n      if (channels.length === 0) {\n        console.error('No Telegram channels configured');\n        return res.status(200).send('OK');\n      }\n      \n      const channel = channels[0]; // Use first configured Telegram channel\n      const config = typeof channel.config === 'string' ? JSON.parse(channel.config) : (channel.config || {});\n      const botToken = config.botToken;\n      \n      if (!botToken) {\n        console.error('No bot token configured');\n        return res.status(200).send('OK');\n      }\n      \n      // Find or create customer\n      let customer = await storage.getCustomerByTelegramId(channel.userId, chatId);\n      if (!customer) {\n        const customerName = [firstName, lastName].filter(Boolean).join(' ') || 'Telegram User';\n        customer = await storage.createCustomer({\n          userId: channel.userId,\n          name: customerName,\n          source: 'telegram',\n          metadata: { \n            identifier: chatId,\n            telegramUsername: username,\n            firstName: firstName,\n            lastName: lastName \n          },\n        });\n      }\n      \n      // Find or create conversation\n      let conversation = await storage.getActiveConversationByCustomer(customer.id);\n      if (!conversation) {\n        conversation = await storage.createConversation({\n          userId: channel.userId,\n          customerId: customer.id,\n          channel: channel.id,\n          status: 'active',\n          lastMessageAt: new Date(),\n        });\n        \n        // Notify real-time clients about new conversation\n        realtimeService.notifyNewConversation(channel.userId, conversation);\n      }\n      \n      // Store customer message\n      await storage.createMessage({\n        conversationId: conversation.id,\n        content: messageText,\n        sender: 'customer',\n        metadata: { \n          channel: 'telegram', \n          customerIdentifier: chatId,\n          telegramMessageId: message.message_id,\n          telegramUserId: message.from?.id\n        },\n      });\n      \n      // Get conversation history for AI context\n      const messages = await storage.getMessagesByConversation(conversation.id);\n      // Filter out generic English responses but keep all other conversation context\n      const conversationHistory = messages.slice(-10)\n        .filter(m => \n          m.content !== \"I'm here to help! How can I assist you today!\" &&\n          m.content.trim() !== \"\" &&\n          !m.content.includes(\"How can I assist you today\")\n        )\n        .map(m => ({\n          role: m.sender === 'customer' ? 'user' as const : 'assistant' as const,\n          content: m.content,\n        }));\n      \n      // Generate AI response\n      const aiResponse = await generateAIResponse(\n        channel.userId,\n        messageText,\n        conversationHistory\n      );\n      \n      // Store AI response\n      await storage.createMessage({\n        conversationId: conversation.id,\n        content: aiResponse.message,\n        sender: 'ai',\n        metadata: { \n          action: aiResponse.action, \n          confidence: aiResponse.confidence,\n          channel: 'telegram'\n        },\n      });\n      \n      // Handle booking if needed\n      if (aiResponse.action === 'booking' && aiResponse.bookingData) {\n        let bookingDate = new Date(); // Default to now\n        \n        // Parse preferred date/time with better logic\n        if (aiResponse.bookingData.preferredDateTime) {\n          const dateTimeStr = aiResponse.bookingData.preferredDateTime.toLowerCase();\n          \n          if (dateTimeStr.includes('sabah') || dateTimeStr.includes('tomorrow')) {\n            // Tomorrow\n            bookingDate = new Date();\n            bookingDate.setDate(bookingDate.getDate() + 1);\n            \n            // Extract time (like \"saat 9\", \"9:00\")\n            const timeMatch = dateTimeStr.match(/(\\d+):?(\\d*)/);\n            if (timeMatch) {\n              const hour = parseInt(timeMatch[1]);\n              const minute = timeMatch[2] ? parseInt(timeMatch[2]) : 0;\n              bookingDate.setHours(hour, minute, 0, 0);\n            }\n          } else if (dateTimeStr.includes('04.09.2025') || dateTimeStr.includes('2025-09-04')) {\n            // Specific date\n            bookingDate = new Date('2025-09-04');\n            const timeMatch = dateTimeStr.match(/(\\d+):(\\d+)/);\n            if (timeMatch) {\n              bookingDate.setHours(parseInt(timeMatch[1]), parseInt(timeMatch[2]), 0, 0);\n            } else {\n              bookingDate.setHours(9, 0, 0, 0); // Default 9 AM\n            }\n          } else {\n            // Try to parse as ISO date\n            try {\n              const parsed = new Date(aiResponse.bookingData.preferredDateTime);\n              if (!isNaN(parsed.getTime())) {\n                bookingDate = parsed;\n              }\n            } catch (error) {\n              console.log('Using default date due to parsing error:', error);\n            }\n          }\n        }\n        \n        const booking = await storage.createBooking({\n          userId: channel.userId,\n          customerId: customer.id,\n          conversationId: conversation.id,\n          service: aiResponse.bookingData.service || 'General consultation',\n          dateTime: bookingDate,\n          status: 'pending',\n          notes: `Auto-created from Telegram chat. Customer: ${aiResponse.bookingData.customerName || customer.name}. Requested: ${aiResponse.bookingData.preferredDateTime || 'no specific time'}`,\n        });\n        \n        realtimeService.notifyBookingCreated(channel.userId, booking);\n      }\n      \n      // Send response back to Telegram\n      try {\n        const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;\n        const response = await fetch(telegramApiUrl, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            chat_id: chatId,\n            text: aiResponse.message,\n            parse_mode: 'Markdown'\n          })\n        });\n        \n        if (!response.ok) {\n          console.error('Failed to send Telegram response:', await response.text());\n        }\n      } catch (error) {\n        console.error('Error sending Telegram message:', error);\n      }\n      \n      // Notify real-time clients\n      realtimeService.broadcastToUser(channel.userId, {\n        type: 'new_message',\n        conversationId: conversation.id,\n        message: {\n          id: `temp-${Date.now()}`,\n          conversationId: conversation.id,\n          content: messageText,\n          sender: 'customer',\n          createdAt: new Date(),\n          metadata: { channel: 'telegram' }\n        }\n      });\n      \n      realtimeService.broadcastToUser(channel.userId, {\n        type: 'new_message',\n        conversationId: conversation.id,\n        message: {\n          id: `temp-ai-${Date.now()}`,\n          conversationId: conversation.id,\n          content: aiResponse.message,\n          sender: 'ai',\n          createdAt: new Date(),\n          metadata: { action: aiResponse.action, confidence: aiResponse.confidence }\n        }\n      });\n      \n      res.status(200).send('OK');\n    } catch (error) {\n      console.error('Telegram webhook error:', error);\n      res.status(200).send('OK'); // Always return 200 to avoid Telegram retries\n    }\n  });\n\n  // Local subscription management\n  app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n    const userId = req.user.claims.sub;\n    let user = await storage.getUser(userId);\n\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    try {\n      // Simple local subscription - mark user as having a subscription\n      await storage.updateUserSubscriptionStatus(userId, 'active', 'professional');\n      \n      res.json({\n        success: true,\n        message: \"Subscription activated locally\",\n        plan: \"professional\"\n      });\n    } catch (error: any) {\n      console.error(\"Subscription error:\", error);\n      return res.status(400).json({ error: { message: error.message } });\n    }\n  });\n\n  // Get subscription status\n  app.get('/api/subscription/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        status: user.subscriptionStatus || 'inactive',\n        plan: user.subscriptionStatus === 'active' ? 'professional' : 'free'\n      });\n    } catch (error) {\n      console.error(\"Error fetching subscription status:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscription status\" });\n    }\n  });\n\n  // Reminder preferences routes\n  app.get('/api/reminder-preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const preferences = await storage.getUserReminderPreferences(userId);\n      res.json(preferences || {\n        emailReminders: true,\n        smsReminders: false,\n        whatsappReminders: false,\n        reminderTiming: ['24h', '1h'],\n        language: 'en'\n      });\n    } catch (error) {\n      console.error('Error fetching reminder preferences:', error);\n      res.status(500).json({ message: 'Failed to fetch reminder preferences' });\n    }\n  });\n\n  app.post('/api/reminder-preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const preferences = await storage.upsertUserReminderPreferences({\n        ...req.body,\n        userId,\n      });\n      res.json(preferences);\n    } catch (error) {\n      console.error('Error saving reminder preferences:', error);\n      res.status(500).json({ message: 'Failed to save reminder preferences' });\n    }\n  });\n\n  // Get booking reminders for user\n  app.get('/api/reminders', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const reminders = await storage.getBookingRemindersByUser(userId);\n      res.json(reminders);\n    } catch (error) {\n      console.error('Error fetching reminders:', error);\n      res.status(500).json({ message: 'Failed to fetch reminders' });\n    }\n  });\n\n  // Schedule management routes\n  app.get('/api/schedule-slots', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const slots = await storage.getScheduleSlots(userId);\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching schedule slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch schedule slots\" });\n    }\n  });\n\n  app.post('/api/schedule-slots', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const slotData = { ...req.body, userId };\n      \n      const slot = await storage.createScheduleSlot(slotData);\n      res.json(slot);\n    } catch (error) {\n      console.error(\"Error creating schedule slot:\", error);\n      res.status(500).json({ message: \"Failed to create schedule slot\" });\n    }\n  });\n\n  app.patch('/api/schedule-slots/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const slotData = req.body;\n      \n      const slot = await storage.updateScheduleSlot(id, slotData);\n      res.json(slot);\n    } catch (error) {\n      console.error(\"Error updating schedule slot:\", error);\n      res.status(500).json({ message: \"Failed to update schedule slot\" });\n    }\n  });\n\n  app.delete('/api/schedule-slots/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      await storage.deleteScheduleSlot(id);\n      res.json({ message: \"Schedule slot deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting schedule slot:\", error);\n      res.status(500).json({ message: \"Failed to delete schedule slot\" });\n    }\n  });\n\n  // Special availability routes\n  app.get('/api/special-availability', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const special = await storage.getSpecialAvailability(userId);\n      res.json(special);\n    } catch (error) {\n      console.error(\"Error fetching special availability:\", error);\n      res.status(500).json({ message: \"Failed to fetch special availability\" });\n    }\n  });\n\n  app.post('/api/special-availability', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const specialData = { ...req.body, userId, date: new Date(req.body.date) };\n      \n      const special = await storage.createSpecialAvailability(specialData);\n      res.json(special);\n    } catch (error) {\n      console.error(\"Error creating special availability:\", error);\n      res.status(500).json({ message: \"Failed to create special availability\" });\n    }\n  });\n\n  app.delete('/api/special-availability/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      await storage.deleteSpecialAvailability(id);\n      res.json({ message: \"Special availability deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting special availability:\", error);\n      res.status(500).json({ message: \"Failed to delete special availability\" });\n    }\n  });\n\n  // Available time slots endpoint for AI\n  app.get('/api/available-slots', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { date, duration } = req.query;\n      \n      if (!date) {\n        return res.status(400).json({ message: \"Date parameter is required\" });\n      }\n      \n      const requestDate = new Date(date as string);\n      const slotDuration = duration ? parseInt(duration as string) : 30;\n      \n      const availableSlots = await storage.getAvailableTimeSlots(userId, requestDate, slotDuration);\n      res.json(availableSlots);\n    } catch (error) {\n      console.error(\"Error fetching available slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch available slots\" });\n    }\n  });\n\n  // Booking confirmation workflow routes\n  app.patch('/api/bookings/:id/owner-action', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { action, comment } = req.body;\n      \n      if (!action || !['approve', 'reject', 'reschedule'].includes(action)) {\n        return res.status(400).json({ message: \"Valid action is required (approve, reject, reschedule)\" });\n      }\n      \n      const booking = await storage.updateBookingWithOwnerAction(id, action, comment);\n      \n      // Send AI response to customer based on owner action\n      try {\n        const notificationSent = await notifyCustomerOfBookingAction(id, action, comment);\n        console.log(`Notification sent to customer: ${notificationSent}`);\n      } catch (error) {\n        console.error('Error sending notification to customer:', error);\n        // Don't fail the request if notification fails\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error processing owner action:\", error);\n      res.status(500).json({ message: \"Failed to process owner action\" });\n    }\n  });\n\n  // Start reminder processing scheduler\n  reminderService.startReminderScheduler();\n\n  return httpServer;\n}\n","size_bytes":31239},"server/storage.ts":{"content":"import {\n  users,\n  customers,\n  conversations,\n  messages,\n  bookings,\n  channels,\n  aiTraining,\n  usage,\n  bookingReminders,\n  userReminderPreferences,\n  type User,\n  type UpsertUser,\n  type InsertCustomer,\n  type Customer,\n  type InsertConversation,\n  type Conversation,\n  type InsertMessage,\n  type Message,\n  type InsertBooking,\n  type Booking,\n  type InsertChannel,\n  type Channel,\n  type InsertAiTraining,\n  type AiTraining,\n  type InsertUsage,\n  type Usage,\n  type BookingReminder,\n  type InsertBookingReminder,\n  type UserReminderPreferences,\n  type InsertUserReminderPreferences,\n  scheduleSlots,\n  type ScheduleSlot,\n  type InsertScheduleSlot,\n  specialAvailability,\n  type SpecialAvailability,\n  type InsertSpecialAvailability,\n  bookingContexts,\n  type BookingContext,\n  type InsertBookingContext,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, ne } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserSubscriptionStatus(id: string, status: string, plan?: string): Promise<User>;\n  updateUserAISettings(id: string, settings: { preferredLanguage?: string; aiPromptCustomization?: string; aiLanguageInstructions?: string; }): Promise<void>;\n\n  // Customer operations\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomersByUser(userId: string): Promise<Customer[]>;\n  getCustomerByIdentifier(userId: string, identifier: string, source: string): Promise<Customer | undefined>;\n  getCustomerByTelegramId(userId: string, telegramChatId: string): Promise<Customer | undefined>;\n\n  // Conversation operations\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  getConversationById(id: string): Promise<Conversation | undefined>;\n  getConversationsByUser(userId: string): Promise<Conversation[]>;\n  getActiveConversations(userId: string): Promise<Conversation[]>;\n  getActiveConversationByCustomer(customerId: string): Promise<Conversation | undefined>;\n  updateConversationStatus(id: string, status: string): Promise<void>;\n\n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessagesByConversation(conversationId: string): Promise<Message[]>;\n\n  // Booking operations\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  getBookingsByUser(userId: string): Promise<Booking[]>;\n  getTodaysBookings(userId: string): Promise<Booking[]>;\n  updateBookingStatus(id: string, status: string): Promise<void>;\n\n  // Channel operations\n  createChannel(channel: InsertChannel): Promise<Channel>;\n  getChannel(id: string): Promise<Channel | undefined>;\n  getChannelsByUser(userId: string): Promise<Channel[]>;\n  getChannelsByType(type: string): Promise<Channel[]>;\n  updateChannelStatus(id: string, isActive: boolean): Promise<void>;\n  updateChannelConfig(id: string, config: any): Promise<void>;\n\n  // AI Training operations\n  createAiTraining(training: InsertAiTraining): Promise<AiTraining>;\n  getAiTrainingByUser(userId: string): Promise<AiTraining[]>;\n\n  // Usage operations\n  createUsage(usage: InsertUsage): Promise<Usage>;\n  getTodaysUsage(userId: string): Promise<Usage | undefined>;\n  updateUsage(userId: string, tokensUsed: number, messagesProcessed: number, cost: string): Promise<void>;\n\n  // Reminder operations\n  createBookingReminder(reminder: InsertBookingReminder): Promise<BookingReminder>;\n  getBookingRemindersByUser(userId: string): Promise<BookingReminder[]>;\n  getPendingReminders(): Promise<BookingReminder[]>;\n  updateReminderStatus(id: string, status: string, sentAt?: Date, errorMessage?: string): Promise<void>;\n  getUserReminderPreferences(userId: string): Promise<UserReminderPreferences | undefined>;\n  upsertUserReminderPreferences(preferences: InsertUserReminderPreferences): Promise<UserReminderPreferences>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserSubscriptionStatus(id: string, status: string, plan?: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        subscriptionStatus: status,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserAISettings(id: string, settings: { preferredLanguage?: string; aiPromptCustomization?: string; aiLanguageInstructions?: string; }): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        ...settings,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id));\n  }\n\n  // Customer operations\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await db.insert(customers).values(customer).returning();\n    return newCustomer;\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async getCustomersByUser(userId: string): Promise<Customer[]> {\n    return await db.select().from(customers).where(eq(customers.userId, userId)).orderBy(desc(customers.createdAt));\n  }\n\n  async getCustomerByIdentifier(userId: string, identifier: string, source: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(\n        and(\n          eq(customers.userId, userId),\n          eq(customers.source, source),\n          sql`${customers.email} = ${identifier} OR ${customers.phone} = ${identifier}`\n        )\n      );\n    return customer;\n  }\n\n  async getCustomerByTelegramId(userId: string, telegramChatId: string): Promise<Customer | undefined> {\n    const [customer] = await db\n      .select()\n      .from(customers)\n      .where(\n        and(\n          eq(customers.userId, userId),\n          eq(customers.source, \"telegram\"),\n          sql`${customers.metadata}->>'identifier' = ${telegramChatId}`\n        )\n      );\n    return customer;\n  }\n\n  // Conversation operations\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [newConversation] = await db.insert(conversations).values(conversation).returning();\n    return newConversation;\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select().from(conversations).where(eq(conversations.id, id));\n    return conversation;\n  }\n\n  async getConversationById(id: string): Promise<Conversation | undefined> {\n    return this.getConversation(id);\n  }\n\n  async getConversationsByUser(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.lastMessageAt));\n  }\n\n  async getActiveConversations(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(and(eq(conversations.userId, userId), eq(conversations.status, \"active\")))\n      .orderBy(desc(conversations.lastMessageAt));\n  }\n\n  async getActiveConversationByCustomer(customerId: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(and(eq(conversations.customerId, customerId), eq(conversations.status, \"active\")))\n      .orderBy(desc(conversations.lastMessageAt));\n    return conversation;\n  }\n\n  async updateConversationStatus(id: string, status: string): Promise<void> {\n    await db.update(conversations).set({ status }).where(eq(conversations.id, id));\n  }\n\n  // Message operations\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    \n    // Update conversation's last message timestamp\n    await db\n      .update(conversations)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(conversations.id, message.conversationId));\n    \n    return newMessage;\n  }\n\n  async getMessagesByConversation(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  // Booking operations\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db.insert(bookings).values(booking).returning();\n    return newBooking;\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking;\n  }\n\n  async getBookingsByUser(userId: string): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async getTodaysBookings(userId: string): Promise<Booking[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return await db\n      .select()\n      .from(bookings)\n      .where(\n        and(\n          eq(bookings.userId, userId),\n          sql`${bookings.dateTime} >= ${today}`,\n          sql`${bookings.dateTime} < ${tomorrow}`\n        )\n      )\n      .orderBy(bookings.dateTime);\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<void> {\n    await db.update(bookings).set({ status }).where(eq(bookings.id, id));\n  }\n\n  // Channel operations\n  async createChannel(channel: InsertChannel): Promise<Channel> {\n    const [newChannel] = await db.insert(channels).values(channel).returning();\n    return newChannel;\n  }\n\n  async getChannelsByUser(userId: string): Promise<Channel[]> {\n    return await db.select().from(channels).where(eq(channels.userId, userId));\n  }\n\n  async getChannelsByType(type: string): Promise<Channel[]> {\n    return await db.select().from(channels).where(eq(channels.type, type));\n  }\n\n  async getChannel(id: string): Promise<Channel | undefined> {\n    const [channel] = await db.select().from(channels).where(eq(channels.id, id));\n    return channel;\n  }\n\n  async updateChannelStatus(id: string, isActive: boolean): Promise<void> {\n    await db.update(channels).set({ isActive }).where(eq(channels.id, id));\n  }\n\n  async updateChannelConfig(id: string, config: any): Promise<void> {\n    await db.update(channels).set({ \n      config: config\n    }).where(eq(channels.id, id));\n  }\n\n  // AI Training operations\n  async createAiTraining(training: InsertAiTraining): Promise<AiTraining> {\n    const [newTraining] = await db.insert(aiTraining).values(training).returning();\n    return newTraining;\n  }\n\n  async getAiTrainingByUser(userId: string): Promise<AiTraining[]> {\n    return await db\n      .select()\n      .from(aiTraining)\n      .where(and(eq(aiTraining.userId, userId), eq(aiTraining.isActive, true)));\n  }\n\n  // Usage operations\n  async createUsage(usageData: InsertUsage): Promise<Usage> {\n    const [newUsage] = await db.insert(usage).values(usageData).returning();\n    return newUsage;\n  }\n\n  async getTodaysUsage(userId: string): Promise<Usage | undefined> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [result] = await db\n      .select()\n      .from(usage)\n      .where(and(eq(usage.userId, userId), sql`DATE(${usage.date}) = DATE(${today})`));\n    return result;\n  }\n\n  async updateUsage(userId: string, tokensUsed: number, messagesProcessed: number, cost: string): Promise<void> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Check if usage record exists for today\n    const existingUsage = await this.getTodaysUsage(userId);\n    \n    if (existingUsage) {\n      // Update existing record\n      await db\n        .update(usage)\n        .set({\n          tokensUsed: (existingUsage.tokensUsed || 0) + tokensUsed,\n          messagesProcessed: (existingUsage.messagesProcessed || 0) + messagesProcessed,\n          cost: (parseFloat(existingUsage.cost || '0') + parseFloat(cost)).toFixed(4),\n        })\n        .where(and(eq(usage.userId, userId), sql`DATE(${usage.date}) = DATE(${today})`));\n    } else {\n      // Create new record\n      await db\n        .insert(usage)\n        .values({\n          userId,\n          date: today,\n          tokensUsed,\n          messagesProcessed,\n          cost,\n        });\n    }\n  }\n\n  // Reminder operations\n  async createBookingReminder(reminder: InsertBookingReminder): Promise<BookingReminder> {\n    const [newReminder] = await db.insert(bookingReminders).values(reminder).returning();\n    return newReminder;\n  }\n\n  async getBookingRemindersByUser(userId: string): Promise<BookingReminder[]> {\n    return await db\n      .select()\n      .from(bookingReminders)\n      .where(eq(bookingReminders.userId, userId))\n      .orderBy(desc(bookingReminders.scheduledTime));\n  }\n\n  async getPendingReminders(): Promise<BookingReminder[]> {\n    const now = new Date();\n    return await db\n      .select()\n      .from(bookingReminders)\n      .where(and(\n        eq(bookingReminders.status, 'pending'),\n        sql`${bookingReminders.scheduledTime} <= ${now}`\n      ))\n      .orderBy(bookingReminders.scheduledTime);\n  }\n\n  async updateReminderStatus(id: string, status: string, sentAt?: Date, errorMessage?: string): Promise<void> {\n    await db\n      .update(bookingReminders)\n      .set({\n        status,\n        sentAt,\n        errorMessage,\n        updatedAt: new Date(),\n      })\n      .where(eq(bookingReminders.id, id));\n  }\n\n  async getUserReminderPreferences(userId: string): Promise<UserReminderPreferences | undefined> {\n    const [preferences] = await db\n      .select()\n      .from(userReminderPreferences)\n      .where(eq(userReminderPreferences.userId, userId));\n    return preferences;\n  }\n\n  async upsertUserReminderPreferences(preferences: InsertUserReminderPreferences): Promise<UserReminderPreferences> {\n    const [result] = await db\n      .insert(userReminderPreferences)\n      .values(preferences)\n      .onConflictDoUpdate({\n        target: userReminderPreferences.userId,\n        set: {\n          ...preferences,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  // Schedule management methods\n  async getScheduleSlots(userId: string): Promise<ScheduleSlot[]> {\n    return await db.select().from(scheduleSlots).where(eq(scheduleSlots.userId, userId));\n  }\n\n  async createScheduleSlot(slot: InsertScheduleSlot): Promise<ScheduleSlot> {\n    const [result] = await db.insert(scheduleSlots).values(slot).returning();\n    return result;\n  }\n\n  async updateScheduleSlot(id: string, slot: Partial<InsertScheduleSlot>): Promise<ScheduleSlot> {\n    const [result] = await db\n      .update(scheduleSlots)\n      .set({ ...slot, updatedAt: new Date() })\n      .where(eq(scheduleSlots.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteScheduleSlot(id: string): Promise<void> {\n    await db.delete(scheduleSlots).where(eq(scheduleSlots.id, id));\n  }\n\n  // Special availability methods\n  async getSpecialAvailability(userId: string): Promise<SpecialAvailability[]> {\n    return await db.select().from(specialAvailability).where(eq(specialAvailability.userId, userId));\n  }\n\n  async createSpecialAvailability(special: InsertSpecialAvailability): Promise<SpecialAvailability> {\n    const [result] = await db.insert(specialAvailability).values(special).returning();\n    return result;\n  }\n\n  async deleteSpecialAvailability(id: string): Promise<void> {\n    await db.delete(specialAvailability).where(eq(specialAvailability.id, id));\n  }\n\n  // Booking context methods\n  async createBookingContext(context: InsertBookingContext): Promise<BookingContext> {\n    const [result] = await db.insert(bookingContexts).values(context).returning();\n    return result;\n  }\n\n  async getBookingContext(conversationId: string): Promise<BookingContext | undefined> {\n    const [result] = await db.select().from(bookingContexts).where(eq(bookingContexts.conversationId, conversationId));\n    return result;\n  }\n\n  async updateBookingContext(id: string, context: Partial<InsertBookingContext>): Promise<BookingContext> {\n    const [result] = await db\n      .update(bookingContexts)\n      .set({ ...context, updatedAt: new Date() })\n      .where(eq(bookingContexts.id, id))\n      .returning();\n    return result;\n  }\n\n  // Enhanced booking methods\n  async updateBookingWithOwnerAction(id: string, action: string, comment?: string): Promise<Booking> {\n    const [result] = await db\n      .update(bookings)\n      .set({ \n        ownerAction: action, \n        ownerComment: comment,\n        status: action === 'approve' ? 'confirmed' : action === 'reject' ? 'cancelled' : 'pending',\n        updatedAt: new Date() \n      })\n      .where(eq(bookings.id, id))\n      .returning();\n    return result;\n  }\n\n  async getAvailableTimeSlots(userId: string, date: Date, duration: number = 30): Promise<{time: string, available: boolean}[]> {\n    const dayOfWeek = date.getDay();\n    const dateStr = date.toISOString().split('T')[0];\n    \n    // Get regular schedule slots for this day\n    const slots = await db.select().from(scheduleSlots)\n      .where(and(\n        eq(scheduleSlots.userId, userId),\n        eq(scheduleSlots.dayOfWeek, dayOfWeek),\n        eq(scheduleSlots.isAvailable, true)\n      ));\n    \n    // Check for special availability/blackout for this date\n    const special = await db.select().from(specialAvailability)\n      .where(and(\n        eq(specialAvailability.userId, userId),\n        sql`DATE(${specialAvailability.date}) = ${dateStr}`\n      ));\n    \n    // Get existing bookings for this date\n    const existingBookings = await db.select().from(bookings)\n      .where(and(\n        eq(bookings.userId, userId),\n        sql`DATE(${bookings.dateTime}) = ${dateStr}`,\n        ne(bookings.status, 'cancelled')\n      ));\n    \n    const availableSlots: {time: string, available: boolean}[] = [];\n    \n    // If there's a blackout date, return no slots\n    if (special.some(s => !s.isAvailable)) {\n      return availableSlots;\n    }\n    \n    // Generate time slots based on schedule\n    for (const slot of slots) {\n      const startHour = parseInt(slot.startTime.split(':')[0]);\n      const startMin = parseInt(slot.startTime.split(':')[1]);\n      const endHour = parseInt(slot.endTime.split(':')[0]);\n      const endMin = parseInt(slot.endTime.split(':')[1]);\n      \n      const startTime = startHour * 60 + startMin;\n      const endTime = endHour * 60 + endMin;\n      \n      for (let time = startTime; time < endTime; time += (slot.slotDuration || 30)) {\n        const hours = Math.floor(time / 60);\n        const minutes = time % 60;\n        const timeStr = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n        \n        // Check if this time slot conflicts with existing bookings\n        const conflictingBookings = existingBookings.filter(booking => {\n          if (!booking.dateTime) return false;\n          const bookingTime = new Date(booking.dateTime);\n          const bookingHour = bookingTime.getHours();\n          const bookingMin = bookingTime.getMinutes();\n          const bookingTimeInMin = bookingHour * 60 + bookingMin;\n          \n          return Math.abs(bookingTimeInMin - time) < duration;\n        });\n        \n        const available = conflictingBookings.length < (slot.maxBookingsPerSlot || 1);\n        \n        availableSlots.push({ time: timeStr, available });\n      }\n    }\n    \n    return availableSlots.sort((a, b) => a.time.localeCompare(b.time));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":20253},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  businessName: varchar(\"business_name\"),\n  businessType: varchar(\"business_type\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"inactive\"),\n  // AI and Language Settings\n  preferredLanguage: varchar(\"preferred_language\").default(\"en\"), // en, az, ru, etc.\n  aiPromptCustomization: text(\"ai_prompt_customization\"), // custom system prompt\n  aiLanguageInstructions: text(\"ai_language_instructions\"), // language-specific instructions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table for CRM\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: varchar(\"name\"),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  source: varchar(\"source\"), // whatsapp, messenger, website, etc.\n  metadata: jsonb(\"metadata\"), // additional customer data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Conversations table\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  channel: varchar(\"channel\").notNull(), // whatsapp, messenger, website, etc.\n  status: varchar(\"status\").default(\"active\"), // active, closed, pending\n  lastMessageAt: timestamp(\"last_message_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").references(() => conversations.id).notNull(),\n  content: text(\"content\").notNull(),\n  sender: varchar(\"sender\").notNull(), // customer, ai, agent\n  metadata: jsonb(\"metadata\"), // additional message data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bookings table - Enhanced for confirmation workflow\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  conversationId: varchar(\"conversation_id\").references(() => conversations.id),\n  service: varchar(\"service\"),\n  dateTime: timestamp(\"date_time\"),\n  status: varchar(\"status\").default(\"pending\"), // pending, confirmed, cancelled, rescheduled\n  notes: text(\"notes\"),\n  // Enhanced fields for confirmation workflow\n  aiProposedSlots: jsonb(\"ai_proposed_slots\"), // AI-suggested time slots\n  customerPreference: text(\"customer_preference\"), // Customer's original request\n  ownerAction: varchar(\"owner_action\"), // approve, reject, reschedule\n  ownerComment: text(\"owner_comment\"), // Owner's reason for rejection/rescheduling\n  urgencyLevel: varchar(\"urgency_level\").default(\"normal\"), // urgent, normal, low\n  rescheduledFrom: timestamp(\"rescheduled_from\"), // Original date if rescheduled\n  aiResponseSent: boolean(\"ai_response_sent\").default(false), // Track if AI communicated back\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Channels table for integration management\nexport const channels = pgTable(\"channels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\").notNull(), // whatsapp, messenger, website, instagram\n  name: varchar(\"name\").notNull(),\n  config: jsonb(\"config\"), // channel-specific configuration\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI Training data\nexport const aiTraining = pgTable(\"ai_training\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  category: varchar(\"category\"), // faq, services, policies, etc.\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Usage tracking for billing\nexport const usage = pgTable(\"usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  tokensUsed: integer(\"tokens_used\").default(0),\n  messagesProcessed: integer(\"messages_processed\").default(0),\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  customers: many(customers),\n  conversations: many(conversations),\n  bookings: many(bookings),\n  channels: many(channels),\n  aiTraining: many(aiTraining),\n  usage: many(usage),\n}));\n\nexport const customersRelations = relations(customers, ({ one, many }) => ({\n  user: one(users, { fields: [customers.userId], references: [users.id] }),\n  conversations: many(conversations),\n  bookings: many(bookings),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  user: one(users, { fields: [conversations.userId], references: [users.id] }),\n  customer: one(customers, { fields: [conversations.customerId], references: [customers.id] }),\n  messages: many(messages),\n  bookings: many(bookings),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, { fields: [messages.conversationId], references: [conversations.id] }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, { fields: [bookings.userId], references: [users.id] }),\n  customer: one(customers, { fields: [bookings.customerId], references: [customers.id] }),\n  conversation: one(conversations, { fields: [bookings.conversationId], references: [conversations.id] }),\n}));\n\nexport const channelsRelations = relations(channels, ({ one }) => ({\n  user: one(users, { fields: [channels.userId], references: [users.id] }),\n}));\n\nexport const aiTrainingRelations = relations(aiTraining, ({ one }) => ({\n  user: one(users, { fields: [aiTraining.userId], references: [users.id] }),\n}));\n\nexport const usageRelations = relations(usage, ({ one }) => ({\n  user: one(users, { fields: [usage.userId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChannelSchema = createInsertSchema(channels).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiTrainingSchema = createInsertSchema(aiTraining).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUsageSchema = createInsertSchema(usage).omit({\n  id: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Booking reminders table\nexport const bookingReminders = pgTable(\"booking_reminders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  reminderType: varchar(\"reminder_type\").notNull(), // 'email', 'sms', 'whatsapp'\n  scheduledTime: timestamp(\"scheduled_time\").notNull(),\n  messageContent: text(\"message_content\").notNull(),\n  status: varchar(\"status\").default(\"pending\").notNull(), // 'pending', 'sent', 'failed', 'cancelled'\n  sentAt: timestamp(\"sent_at\"),\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// User reminder preferences\nexport const userReminderPreferences = pgTable(\"user_reminder_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull().unique(),\n  emailReminders: boolean(\"email_reminders\").default(true).notNull(),\n  smsReminders: boolean(\"sms_reminders\").default(false).notNull(),\n  whatsappReminders: boolean(\"whatsapp_reminders\").default(false).notNull(),\n  reminderTiming: jsonb(\"reminder_timing\").default(sql`'[\"24h\", \"1h\"]'::jsonb`).notNull(), // Array of timing like \"24h\", \"1h\", \"30min\"\n  customMessage: text(\"custom_message\"),\n  language: varchar(\"language\").default(\"en\").notNull(), // 'en', 'az', 'ru'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport type BookingReminder = typeof bookingReminders.$inferSelect;\nexport type InsertBookingReminder = typeof bookingReminders.$inferInsert;\nexport type UserReminderPreferences = typeof userReminderPreferences.$inferSelect;\nexport type InsertUserReminderPreferences = typeof userReminderPreferences.$inferInsert;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertChannel = z.infer<typeof insertChannelSchema>;\nexport type Channel = typeof channels.$inferSelect;\nexport type InsertAiTraining = z.infer<typeof insertAiTrainingSchema>;\nexport type AiTraining = typeof aiTraining.$inferSelect;\nexport type InsertUsage = z.infer<typeof insertUsageSchema>;\nexport type Usage = typeof usage.$inferSelect;\n\n// Owner's schedule and availability\nexport const scheduleSlots = pgTable(\"schedule_slots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0-6 (Sunday-Saturday)\n  startTime: varchar(\"start_time\").notNull(), // HH:MM format\n  endTime: varchar(\"end_time\").notNull(), // HH:MM format\n  isAvailable: boolean(\"is_available\").default(true),\n  slotDuration: integer(\"slot_duration\").default(30), // minutes per appointment\n  maxBookingsPerSlot: integer(\"max_bookings_per_slot\").default(1),\n  notes: text(\"notes\"), // Special instructions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Special availability or blackout dates\nexport const specialAvailability = pgTable(\"special_availability\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  date: timestamp(\"date\").notNull(),\n  startTime: varchar(\"start_time\"), // If null, entire day is affected\n  endTime: varchar(\"end_time\"),\n  isAvailable: boolean(\"is_available\").notNull(), // true for special availability, false for blackout\n  reason: text(\"reason\"), // Holiday, vacation, special hours, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI Booking Context - Track booking conversations\nexport const bookingContexts = pgTable(\"booking_contexts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").references(() => conversations.id, { onDelete: \"cascade\" }).notNull(),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id, { onDelete: \"cascade\" }),\n  customerRequest: text(\"customer_request\").notNull(), // Original customer message\n  aiAnalysis: jsonb(\"ai_analysis\"), // AI's understanding of the request\n  proposedSlots: jsonb(\"proposed_slots\"), // Time slots AI offered\n  customerSelection: jsonb(\"customer_selection\"), // Customer's choice\n  conversationState: varchar(\"conversation_state\").default(\"initial\"), // initial, slots_proposed, awaiting_selection, confirmed, rejected\n  lastAiMessage: text(\"last_ai_message\"), // Last message AI sent\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type ScheduleSlot = typeof scheduleSlots.$inferSelect;\nexport type InsertScheduleSlot = typeof scheduleSlots.$inferInsert;\nexport type SpecialAvailability = typeof specialAvailability.$inferSelect;\nexport type InsertSpecialAvailability = typeof specialAvailability.$inferInsert;\nexport type BookingContext = typeof bookingContexts.$inferSelect;\nexport type InsertBookingContext = typeof bookingContexts.$inferInsert;\n","size_bytes":14199},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Conversations from \"@/pages/conversations\";\nimport ConversationDetail from \"@/pages/conversation-detail\";\nimport Channels from \"@/pages/channels\";\nimport Bookings from \"@/pages/bookings\";\nimport Customers from \"@/pages/customers\";\nimport Billing from \"@/pages/billing\";\nimport AISettings from \"@/pages/ai-settings\";\nimport ReminderSettings from \"@/pages/reminder-settings\";\nimport Analytics from \"@/pages/analytics\";\nimport Notifications from \"@/pages/notifications\";\nimport ScheduleSettings from \"@/pages/schedule-settings\";\nimport BookingApproval from \"@/pages/booking-approval\";\nimport Settings from \"@/pages/settings\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/conversations\" component={Conversations} />\n          <Route path=\"/conversations/:id\" component={ConversationDetail} />\n          <Route path=\"/channels\" component={Channels} />\n          <Route path=\"/bookings\" component={Bookings} />\n          <Route path=\"/customers\" component={Customers} />\n          <Route path=\"/billing\" component={Billing} />\n          <Route path=\"/ai-settings\" component={AISettings} />\n          <Route path=\"/reminder-settings\" component={ReminderSettings} />\n          <Route path=\"/analytics\" component={Analytics} />\n          <Route path=\"/notifications\" component={Notifications} />\n          <Route path=\"/schedule-settings\" component={ScheduleSettings} />\n          <Route path=\"/booking-approval\" component={BookingApproval} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2464},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 71%, 4%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n.sidebar-transition {\n  transition: width 0.3s ease-in-out;\n}\n\n.stats-card {\n  background: linear-gradient(135deg, var(--card) 0%, hsl(210, 40%, 99%) 100%);\n}\n\n.channel-indicator {\n  animation: pulse 2s infinite;\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.5s ease-out;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n","size_bytes":3526},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"../storage\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"\",\n});\n\nfunction getLanguageInstructions(languageCode: string): string {\n  const languages: Record<string, string> = {\n    'en': 'Respond in English. Use professional business language.',\n    'az': 'Azərbaycan dilində cavab verin. Hörmətli və peşəkar üslubu istifadə edin. Azərbaycan mədəniyyətinin xüsusiyyətlərini nəzərə alın.',\n    'ru': 'Отвечайте на русском языке. Используйте вежливый и профессиональный стиль общения. Учитывайте культурные особенности.',\n    'tr': 'Türkçe yanıt verin. Saygılı ve profesyonel bir üslup kullanın.',\n    'es': 'Responde en español. Usa un lenguaje profesional y cortés.',\n    'fr': 'Répondez en français. Utilisez un langage professionnel et poli.',\n    'de': 'Antworten Sie auf Deutsch. Verwenden Sie eine professionelle und höfliche Sprache.',\n    'pt': 'Responda em português. Use linguagem profissional e educada.',\n    'ar': 'أجب باللغة العربية. استخدم لغة مهنية ومهذبة.',\n  };\n  \n  return languages[languageCode] || languages['en'];\n}\n\nexport interface AIResponse {\n  message: string;\n  action?: 'booking' | 'information' | 'handoff';\n  bookingData?: {\n    service: string;\n    preferredDateTime?: string;\n    customerName?: string;\n    customerPhone?: string;\n    customerEmail?: string;\n  };\n  confidence: number;\n}\n\nexport async function generateAIResponse(\n  userId: string,\n  customerMessage: string,\n  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>,\n  businessContext?: string\n): Promise<AIResponse> {\n  try {\n    // Get AI training data for this user\n    const trainingData = await storage.getAiTrainingByUser(userId);\n    const user = await storage.getUser(userId);\n\n    const businessInfo = businessContext || `\n      Business: ${user?.businessName || 'AI Receptionist Service'}\n      Type: ${user?.businessType || 'Service Provider'}\n    `;\n\n    const trainingContext = trainingData.length > 0 \n      ? trainingData.map(t => `${t.category}: ${t.content}`).join('\\n')\n      : 'General customer service for appointment booking and information requests.';\n\n    // Language-specific instructions\n    const languageInstructions = getLanguageInstructions(user?.preferredLanguage || 'en');\n    \n    // Build system prompt with language and custom instructions\n    let systemPrompt = `IMPORTANT: IGNORE all previous generic responses in the conversation history. You are an AI receptionist for ${user?.businessName || 'the business'}. Your role is to:\n1. Answer customer questions professionally and helpfully\n2. Help customers book appointments when requested\n3. Collect necessary information for bookings (name, service, preferred date/time, contact info)\n4. Provide information about services, hours, and location\n5. Escalate complex issues to human staff when needed\n\nBusiness Context:\n${businessInfo}\n\nTraining Data:\n${trainingContext}\n\nLanguage Instructions:\n${languageInstructions}\n\n${user?.aiPromptCustomization ? `Custom Instructions:\\n${user.aiPromptCustomization}\\n\\n` : ''}\n\n${user?.aiLanguageInstructions ? `Additional Language Guidelines:\\n${user.aiLanguageInstructions}\\n\\n` : ''}\n\nCRITICAL: You MUST respond with ONLY a valid JSON object in this exact format (no other text before or after):\n{\n  \"message\": \"Your response to the customer\",\n  \"action\": \"booking|information|handoff\",\n  \"bookingData\": {\n    \"service\": \"service name if booking\",\n    \"preferredDateTime\": \"if customer specified\",\n    \"customerName\": \"if provided\",\n    \"customerPhone\": \"if provided\", \n    \"customerEmail\": \"if provided\"\n  },\n  \"confidence\": 0.95\n}\n\nGuidelines:\n- Be friendly, professional, and helpful\n- Keep responses concise but informative\n- Always try to help with booking requests\n- Ask for missing information needed for bookings\n- Use \"handoff\" action only for complex issues requiring human intervention\n- Set confidence based on how well you understand the request (0.0 to 1.0)`;\n\n    const messages = [\n      { role: \"system\" as const, content: systemPrompt },\n      ...conversationHistory,\n      { role: \"user\" as const, content: customerMessage }\n    ];\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\", // Using gpt-4o instead of gpt-5 as it's more stable\n      messages,\n      response_format: { type: \"json_object\" },\n      max_completion_tokens: 500,\n    });\n    \n    let aiResponse;\n    try {\n      aiResponse = JSON.parse(response.choices[0].message.content || '{}');\n    } catch (parseError) {\n      console.error('JSON parsing failed:', parseError);\n      console.error('Raw response:', response.choices[0].message.content);\n      \n      // If JSON parsing fails, create a proper Azerbaijani response\n      aiResponse = {\n        message: user?.preferredLanguage === 'az' \n          ? \"Salam! Sizə necə kömək edə bilərəm? Görüş təyin etmək üçün zəng edin və ya mesaj yazın.\"\n          : \"Hello! How can I assist you today? Please let me know if you'd like to book an appointment.\",\n        action: 'information',\n        confidence: 0.7\n      };\n    }\n\n    // Track token usage (temporarily disabled to fix database constraint issue)\n    // const tokensUsed = response.usage?.total_tokens || 0;\n    // const cost = (tokensUsed * 0.00003).toFixed(4); // Approximate cost per token\n    // await storage.updateUsage(userId, tokensUsed, 1, cost);\n\n    return {\n      message: aiResponse.message || \"I'm here to help! How can I assist you today?\",\n      action: aiResponse.action || 'information',\n      bookingData: aiResponse.bookingData,\n      confidence: aiResponse.confidence || 0.8,\n    };\n\n  } catch (error) {\n    console.error(\"Error generating AI response:\", error);\n    console.error(\"Error details:\", JSON.stringify(error, null, 2));\n    \n    // Return Azerbaijani fallback for your language preference\n    return {\n      message: \"Üzr istəyirəm, texniki problemlər yaşayıram. Tezliklə sizə kömək edəcəyəm. Başqa bir sual varsa, yaza bilərsiniz.\",\n      action: 'information',\n      confidence: 0.1,\n    };\n  }\n}\n\nexport async function generateBusinessSummary(userId: string, timeframe: string = '30d'): Promise<string> {\n  try {\n    const conversations = await storage.getConversationsByUser(userId);\n    const bookings = await storage.getBookingsByUser(userId);\n    \n    const conversationCount = conversations.length;\n    const bookingCount = bookings.filter(b => b.status === 'confirmed').length;\n    \n    const prompt = `Generate a brief business summary for an AI receptionist service with:\n- ${conversationCount} conversations in the last ${timeframe}\n- ${bookingCount} confirmed bookings\n- Focus on key insights and recommendations for improvement\n- Keep it under 200 words\n- Format as friendly business advice`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      max_completion_tokens: 250,\n\n    });\n\n    return response.choices[0].message.content || \"Business is performing well with steady customer engagement.\";\n\n  } catch (error) {\n    console.error(\"Error generating business summary:\", error);\n    return \"Unable to generate summary at this time.\";\n  }\n}\n","size_bytes":7604},"server/services/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { storage } from '../storage';\n\ninterface WSClient {\n  ws: WebSocket;\n  userId: string;\n}\n\nexport class RealtimeService {\n  private wss: WebSocketServer;\n  private clients: Map<string, WSClient[]> = new Map();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ server, path: '/ws' });\n    this.setupWebSocket();\n  }\n\n  private setupWebSocket() {\n    this.wss.on('connection', (ws, req) => {\n      console.log('New WebSocket connection');\n\n      ws.on('message', async (data) => {\n        try {\n          const message = JSON.parse(data.toString());\n          await this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('Error handling WebSocket message:', error);\n          ws.send(JSON.stringify({ type: 'error', message: 'Invalid message format' }));\n        }\n      });\n\n      ws.on('close', () => {\n        this.removeClient(ws);\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.removeClient(ws);\n      });\n    });\n  }\n\n  private async handleMessage(ws: WebSocket, message: any) {\n    switch (message.type) {\n      case 'auth':\n        await this.authenticateClient(ws, message.userId);\n        break;\n      case 'join_conversation':\n        await this.joinConversation(ws, message.conversationId);\n        break;\n      case 'send_message':\n        await this.handleNewMessage(ws, message);\n        break;\n      default:\n        ws.send(JSON.stringify({ type: 'error', message: 'Unknown message type' }));\n    }\n  }\n\n  private async authenticateClient(ws: WebSocket, userId: string) {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        ws.send(JSON.stringify({ type: 'error', message: 'Authentication failed' }));\n        ws.close();\n        return;\n      }\n\n      // Store client connection\n      if (!this.clients.has(userId)) {\n        this.clients.set(userId, []);\n      }\n      this.clients.get(userId)!.push({ ws, userId });\n\n      ws.send(JSON.stringify({ type: 'authenticated', userId }));\n\n      // Send initial data\n      const activeConversations = await storage.getActiveConversations(userId);\n      ws.send(JSON.stringify({ \n        type: 'active_conversations', \n        conversations: activeConversations \n      }));\n\n    } catch (error) {\n      console.error('Error authenticating client:', error);\n      ws.send(JSON.stringify({ type: 'error', message: 'Authentication error' }));\n    }\n  }\n\n  private async joinConversation(ws: WebSocket, conversationId: string) {\n    try {\n      const messages = await storage.getMessagesByConversation(conversationId);\n      ws.send(JSON.stringify({ \n        type: 'conversation_history', \n        conversationId,\n        messages \n      }));\n    } catch (error) {\n      console.error('Error joining conversation:', error);\n    }\n  }\n\n  private async handleNewMessage(ws: WebSocket, message: any) {\n    try {\n      const { conversationId, content, sender } = message;\n      \n      const newMessage = await storage.createMessage({\n        conversationId,\n        content,\n        sender,\n        metadata: message.metadata || {},\n      });\n\n      // Broadcast to all clients of this user\n      const conversation = await storage.getConversation(conversationId);\n      if (conversation) {\n        this.broadcastToUser(conversation.userId, {\n          type: 'new_message',\n          message: newMessage,\n          conversationId,\n        });\n      }\n\n    } catch (error) {\n      console.error('Error handling new message:', error);\n      ws.send(JSON.stringify({ type: 'error', message: 'Failed to send message' }));\n    }\n  }\n\n  private removeClient(ws: WebSocket) {\n    for (const [userId, clients] of this.clients.entries()) {\n      const index = clients.findIndex(client => client.ws === ws);\n      if (index !== -1) {\n        clients.splice(index, 1);\n        if (clients.length === 0) {\n          this.clients.delete(userId);\n        }\n        break;\n      }\n    }\n  }\n\n  public broadcastToUser(userId: string, data: any) {\n    const clients = this.clients.get(userId);\n    if (clients) {\n      const message = JSON.stringify(data);\n      clients.forEach(client => {\n        if (client.ws.readyState === WebSocket.OPEN) {\n          client.ws.send(message);\n        }\n      });\n    }\n  }\n\n  public notifyNewConversation(userId: string, conversation: any) {\n    this.broadcastToUser(userId, {\n      type: 'new_conversation',\n      conversation,\n    });\n  }\n\n  public notifyBookingCreated(userId: string, booking: any) {\n    this.broadcastToUser(userId, {\n      type: 'new_booking',\n      booking,\n    });\n  }\n}\n","size_bytes":4700},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useAuth } from './useAuth';\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket() {\n  const { user, isAuthenticated } = useAuth();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  useEffect(() => {\n    if (!isAuthenticated || !(user as any)?.id) {\n      return;\n    }\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      \n      // Authenticate with user ID\n      ws.send(JSON.stringify({\n        type: 'auth',\n        userId: (user as any).id,\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n        console.log('WebSocket message received:', message);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    // Cleanup on unmount\n    return () => {\n      if (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING) {\n        ws.close();\n      }\n    };\n  }, [isAuthenticated, (user as any)?.id]);\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}\n","size_bytes":1954},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/billing.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  CreditCard, \n  Calendar, \n  DollarSign, \n  TrendingUp,\n  CheckCircle,\n  Clock,\n  Zap,\n  Settings,\n  BarChart3,\n  FileDown,\n  Crown\n} from \"lucide-react\";\n\nexport default function Billing() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [manageSubscriptionOpen, setManageSubscriptionOpen] = useState(false);\n  const [usageDetailsOpen, setUsageDetailsOpen] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  const createSubscriptionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/create-subscription\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Subscription Activated\",\n        description: \"Your local subscription has been activated!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const isSubscribed = (user as any)?.subscriptionStatus === 'active';\n  const currentPlan = isSubscribed ? 'Professional' : 'Free Trial';\n  const monthlyLimit = isSubscribed ? 5000 : 100;\n  \n  // Calculate actual monthly usage from conversations and messages\n  const dailyTokens = (stats as any)?.tokensUsed || 0;\n  const totalConversations = (stats as any)?.totalConversations || 0;\n  \n  // Estimate monthly usage based on conversations (assuming avg 10 messages per conversation)\n  const estimatedMonthlyUsage = Math.max(totalConversations * 10, dailyTokens * 30);\n  const currentUsage = Math.min(estimatedMonthlyUsage, monthlyLimit);\n  const usagePercentage = Math.min((currentUsage / monthlyLimit) * 100, 100);\n  \n  // Calculate monthly cost based on subscription\n  const dailyCost = parseFloat((stats as any)?.cost || \"0.00\");\n  const subscriptionMonthlyCost = isSubscribed ? 49.99 : 0;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Billing & Subscription\" \n          subtitle=\"Manage your subscription and monitor usage\"\n          onMenuToggle={() => setSidebarOpen(!sidebarOpen)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Current Plan Overview */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"flex items-center\">\n                        <Zap className=\"h-5 w-5 mr-2 text-primary\" />\n                        Current Plan: {currentPlan}\n                      </CardTitle>\n                      <p className=\"text-muted-foreground mt-1\">\n                        {isSubscribed ? 'Active subscription' : 'Trial period'}\n                      </p>\n                    </div>\n                    <Badge variant={isSubscribed ? \"default\" : \"secondary\"}>\n                      {isSubscribed ? \"Active\" : \"Trial\"}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Monthly Message Usage</span>\n                        <span>{currentUsage.toLocaleString()} / {monthlyLimit.toLocaleString()}</span>\n                      </div>\n                      <Progress value={usagePercentage} className=\"h-2\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 mt-6\">\n                      <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-foreground\">{(stats as any)?.totalConversations || 0}</p>\n                        <p className=\"text-sm text-muted-foreground\">Total Conversations</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-foreground\">${subscriptionMonthlyCost.toFixed(2)}</p>\n                        <p className=\"text-sm text-muted-foreground\">Estimated Monthly Cost</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <CreditCard className=\"h-5 w-5 mr-2\" />\n                    Quick Actions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {!isSubscribed ? (\n                    <Button \n                      className=\"w-full\" \n                      onClick={() => createSubscriptionMutation.mutate()}\n                      disabled={createSubscriptionMutation.isPending}\n                      data-testid=\"button-upgrade\"\n                    >\n                      {createSubscriptionMutation.isPending ? \"Processing...\" : \"Upgrade to Pro\"}\n                    </Button>\n                  ) : (\n                    <Dialog open={manageSubscriptionOpen} onOpenChange={setManageSubscriptionOpen}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full\" \n                          data-testid=\"button-manage\"\n                        >\n                          <Settings className=\"w-4 h-4 mr-2\" />\n                          Manage Subscription\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-[425px]\">\n                        <DialogHeader>\n                          <DialogTitle>Manage Subscription</DialogTitle>\n                          <DialogDescription>\n                            Change your subscription plan or manage billing preferences.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium\">Current Plan: Professional</label>\n                            <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                              <div className=\"flex items-center gap-2\">\n                                <Crown className=\"w-4 h-4 text-green-600\" />\n                                <span className=\"text-sm text-green-700 dark:text-green-300\">Active until next billing cycle</span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium\">Change Plan</label>\n                            <Select value={selectedPlan} onValueChange={setSelectedPlan}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select new plan\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"free\">Free Trial (100 msgs/month)</SelectItem>\n                                <SelectItem value=\"professional\">Professional (5000 msgs/month) - Current</SelectItem>\n                                <SelectItem value=\"enterprise\">Enterprise (Unlimited) - Contact Sales</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" onClick={() => setManageSubscriptionOpen(false)}>\n                            Cancel\n                          </Button>\n                          <Button \n                            onClick={() => {\n                              if (selectedPlan && selectedPlan !== \"professional\") {\n                                toast({\n                                  title: \"Plan Change Requested\",\n                                  description: selectedPlan === \"enterprise\" ? \"Our team will contact you about Enterprise plans.\" : \"Plan will be changed at next billing cycle.\",\n                                });\n                                setManageSubscriptionOpen(false);\n                              }\n                            }}\n                            disabled={!selectedPlan || selectedPlan === \"professional\"}\n                          >\n                            Apply Changes\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n                  )}\n                  <Dialog open={usageDetailsOpen} onOpenChange={setUsageDetailsOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full\"\n                        data-testid=\"button-usage\"\n                      >\n                        <BarChart3 className=\"w-4 h-4 mr-2\" />\n                        View Usage Details\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-[500px]\">\n                      <DialogHeader>\n                        <DialogTitle>Usage Details</DialogTitle>\n                        <DialogDescription>\n                          Detailed breakdown of your AI receptionist usage this month.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <div className=\"text-sm font-medium text-gray-500\">Messages Processed</div>\n                            <div className=\"text-2xl font-bold\">{currentUsage.toLocaleString()}</div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <div className=\"text-sm font-medium text-gray-500\">Monthly Limit</div>\n                            <div className=\"text-2xl font-bold\">{monthlyLimit.toLocaleString()}</div>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Usage Progress</span>\n                            <span>{Math.round(usagePercentage)}%</span>\n                          </div>\n                          <Progress value={usagePercentage} className=\"h-3\" />\n                        </div>\n                        <div className=\"grid grid-cols-1 gap-3\">\n                          <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm font-medium\">Telegram Messages</span>\n                              <span className=\"text-sm\">{currentUsage.toLocaleString()}</span>\n                            </div>\n                          </div>\n                          <div className=\"p-3 bg-gray-50 dark:bg-gray-900/20 rounded-lg opacity-50\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm font-medium\">WhatsApp Messages</span>\n                              <span className=\"text-sm\">0</span>\n                            </div>\n                          </div>\n                          <div className=\"p-3 bg-gray-50 dark:bg-gray-900/20 rounded-lg opacity-50\">\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm font-medium\">Website Chat</span>\n                              <span className=\"text-sm\">0</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <DialogFooter>\n                        <Button variant=\"outline\" onClick={() => setUsageDetailsOpen(false)}>\n                          Close\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => {\n                      // Generate and download invoice\n                      const invoiceData = {\n                        date: new Date().toISOString().split('T')[0],\n                        plan: currentPlan,\n                        amount: currentPlan === 'Professional' ? '$49.99' : '$0.00',\n                        usage: `${currentUsage.toLocaleString()} / ${monthlyLimit.toLocaleString()} messages`,\n                        period: `${new Date(new Date().getFullYear(), new Date().getMonth(), 1).toLocaleDateString()} - ${new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).toLocaleDateString()}`\n                      };\n                      \n                      const invoiceText = `\nAI Receptionist Invoice\n======================\n\nDate: ${invoiceData.date}\nPlan: ${invoiceData.plan}\nBilling Period: ${invoiceData.period}\nUsage: ${invoiceData.usage}\nAmount: ${invoiceData.amount}\n\nThank you for using AI Receptionist!\n`;\n                      \n                      const blob = new Blob([invoiceText], { type: 'text/plain' });\n                      const url = URL.createObjectURL(blob);\n                      const a = document.createElement('a');\n                      a.href = url;\n                      a.download = `invoice-${invoiceData.date}.txt`;\n                      document.body.appendChild(a);\n                      a.click();\n                      document.body.removeChild(a);\n                      URL.revokeObjectURL(url);\n                      \n                      toast({\n                        title: \"Invoice Downloaded\",\n                        description: `Invoice for ${invoiceData.period} has been downloaded.`,\n                      });\n                    }}\n                    data-testid=\"button-invoices\"\n                  >\n                    <FileDown className=\"w-4 h-4 mr-2\" />\n                    Download Invoices\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Local Subscription Info */}\n            {!isSubscribed && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Local Subscription Management</CardTitle>\n                  <p className=\"text-muted-foreground\">\n                    Manage your subscription locally without external payment processing\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Click \"Upgrade to Pro\" above to activate your professional subscription locally. \n                      This demo system tracks your usage and subscription status without requiring payment processing.\n                    </p>\n                    <div className=\"p-4 bg-muted/30 rounded-lg\">\n                      <h4 className=\"font-medium text-foreground mb-2\">Current Status</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        You are currently on the Free Trial plan. Upgrade to Professional to unlock unlimited features.\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Pricing Plans */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Available Plans</CardTitle>\n                <p className=\"text-muted-foreground\">\n                  Choose the plan that best fits your business needs\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {/* Starter Plan */}\n                  <div className=\"border border-border rounded-lg p-6 hover:shadow-md transition-shadow\">\n                    <div className=\"text-center\">\n                      <h3 className=\"text-lg font-semibold text-foreground\">Starter</h3>\n                      <div className=\"text-3xl font-bold text-foreground mt-2\">\n                        $29<span className=\"text-lg text-muted-foreground\">/mo</span>\n                      </div>\n                      <p className=\"text-muted-foreground mt-2\">Perfect for small businesses</p>\n                    </div>\n                    \n                    <ul className=\"space-y-3 mt-6\">\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>1,000 messages/month</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>2 connected channels</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Basic analytics</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Email support</span>\n                      </li>\n                    </ul>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full mt-6\" \n                      onClick={() => {\n                        toast({\n                          title: \"Plan Selection\",\n                          description: \"Starter plan features are already included in your current subscription.\",\n                        });\n                      }}\n                      data-testid=\"button-starter\"\n                    >\n                      Select Plan\n                    </Button>\n                  </div>\n\n                  {/* Professional Plan */}\n                  <div className=\"border border-primary rounded-lg p-6 shadow-md relative\">\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                      <Badge className=\"bg-primary text-primary-foreground\">Most Popular</Badge>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <h3 className=\"text-lg font-semibold text-foreground\">Professional</h3>\n                      <div className=\"text-3xl font-bold text-foreground mt-2\">\n                        $49.99<span className=\"text-lg text-muted-foreground\">/mo</span>\n                      </div>\n                      <p className=\"text-muted-foreground mt-2\">For growing businesses</p>\n                    </div>\n                    \n                    <ul className=\"space-y-3 mt-6\">\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>5,000 messages/month</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Unlimited channels</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Advanced analytics</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Priority support</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Custom AI training</span>\n                      </li>\n                    </ul>\n                    \n                    <Button \n                      variant={isSubscribed ? 'default' : 'default'}\n                      className=\"w-full mt-6\" \n                      onClick={() => {\n                        if (!isSubscribed) {\n                          createSubscriptionMutation.mutate();\n                          toast({\n                            title: \"Upgrading to Professional\",\n                            description: \"Processing your upgrade to Professional plan...\",\n                          });\n                        }\n                      }}\n                      disabled={createSubscriptionMutation.isPending || isSubscribed}\n                      data-testid=\"button-professional\"\n                    >\n                      {isSubscribed ? '✓ Current Plan' : createSubscriptionMutation.isPending ? 'Processing...' : 'Upgrade Now'}\n                    </Button>\n                  </div>\n\n                  {/* Enterprise Plan */}\n                  <div className=\"border border-border rounded-lg p-6 hover:shadow-md transition-shadow\">\n                    <div className=\"text-center\">\n                      <h3 className=\"text-lg font-semibold text-foreground\">Enterprise</h3>\n                      <div className=\"text-3xl font-bold text-foreground mt-2\">\n                        $199<span className=\"text-lg text-muted-foreground\">/mo</span>\n                      </div>\n                      <p className=\"text-muted-foreground mt-2\">For large organizations</p>\n                    </div>\n                    \n                    <ul className=\"space-y-3 mt-6\">\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>20,000 messages/month</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Unlimited channels</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Advanced analytics</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>24/7 phone support</span>\n                      </li>\n                      <li className=\"flex items-center\">\n                        <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                        <span>Custom integrations</span>\n                      </li>\n                    </ul>\n                    \n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full mt-6\" \n                      onClick={() => {\n                        toast({\n                          title: \"Contact Sales\",\n                          description: \"Our sales team will contact you within 24 hours to discuss Enterprise plans.\",\n                        });\n                      }}\n                      data-testid=\"button-enterprise\"\n                    >\n                      Contact Sales\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Usage Analytics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                  Usage Analytics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-4 border border-border rounded-lg\">\n                    <DollarSign className=\"h-8 w-8 text-chart-1 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-foreground\">${(stats as any)?.cost || \"0.00\"}</p>\n                    <p className=\"text-sm text-muted-foreground\">Current Month Cost</p>\n                  </div>\n                  <div className=\"text-center p-4 border border-border rounded-lg\">\n                    <Clock className=\"h-8 w-8 text-chart-2 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-foreground\">{dailyTokens.toLocaleString()}</p>\n                    <p className=\"text-sm text-muted-foreground\">Daily AI Tokens</p>\n                  </div>\n                  <div className=\"text-center p-4 border border-border rounded-lg\">\n                    <Calendar className=\"h-8 w-8 text-chart-4 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-foreground\">{Math.max(0, monthlyLimit - currentUsage).toLocaleString()}</p>\n                    <p className=\"text-sm text-muted-foreground\">Messages Remaining</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":28162},"client/src/pages/bookings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar as CalendarIcon, Clock, User, ChevronLeft, ChevronRight, Plus, Edit, Phone, Mail, MapPin } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  format, \n  isToday, \n  startOfMonth, \n  endOfMonth, \n  eachDayOfInterval, \n  isSameMonth, \n  isSameDay,\n  addMonths,\n  subMonths,\n  parseISO,\n  startOfWeek,\n  endOfWeek\n} from \"date-fns\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ntype CalendarView = 'month' | 'week' | 'year';\n\nconst bookingSchema = z.object({\n  service: z.string().min(1, \"Service is required\"),\n  dateTime: z.string().min(1, \"Date and time are required\"),\n  customerName: z.string().min(1, \"Customer name is required\"),\n  customerPhone: z.string().optional(),\n  customerEmail: z.string().email().optional().or(z.literal(\"\")),\n  notes: z.string().optional(),\n  status: z.enum([\"pending\", \"confirmed\", \"cancelled\"]).default(\"pending\"),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\nexport default function Bookings() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [calendarView, setCalendarView] = useState<CalendarView>('month');\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [selectedBooking, setSelectedBooking] = useState<any>(null);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      service: \"\",\n      dateTime: \"\",\n      customerName: \"\",\n      customerPhone: \"\",\n      customerEmail: \"\",\n      notes: \"\",\n      status: \"pending\",\n    },\n  });\n\n  // Fetch bookings\n  const { data: bookings = [], isLoading: bookingsLoading } = useQuery({\n    queryKey: ['/api/bookings'],\n    enabled: isAuthenticated && !isLoading,\n  });\n\n  // Create booking mutation\n  const createBookingMutation = useMutation({\n    mutationFn: (data: BookingFormData) => apiRequest('POST', '/api/bookings', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({ title: \"Success\", description: \"Booking created successfully!\" });\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update booking mutation\n  const updateBookingMutation = useMutation({\n    mutationFn: ({ id, ...data }: { id: string } & BookingFormData) => \n      apiRequest('PUT', `/api/bookings/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({ title: \"Success\", description: \"Booking updated successfully!\" });\n      setSelectedBooking(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Failed to update booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BookingFormData) => {\n    if (selectedBooking) {\n      updateBookingMutation.mutate({ id: selectedBooking.id, ...data });\n    } else {\n      createBookingMutation.mutate(data);\n    }\n  };\n\n  // Today's bookings for quick view\n  const todaysBookings = Array.isArray(bookings) ? bookings.filter((booking: any) => {\n    if (!booking.dateTime) return false;\n    try {\n      const bookingDate = parseISO(booking.dateTime);\n      return isToday(bookingDate);\n    } catch {\n      return false;\n    }\n  }) : [];\n\n  // Helper to get bookings for a specific date\n  const getBookingsForDate = (date: Date) => {\n    return Array.isArray(bookings) ? bookings.filter((booking: any) => {\n      if (!booking.dateTime) return false;\n      try {\n        const bookingDate = parseISO(booking.dateTime);\n        return bookingDate && isSameDay(bookingDate, date);\n      } catch {\n        return false;\n      }\n    }) : [];\n  };\n\n  // Get booking colors based on service type and status\n  const getBookingColor = (booking: any) => {\n    const service = booking.service?.toLowerCase() || '';\n    const status = booking.status || 'pending';\n    \n    // Service-based colors\n    if (service.includes('diş') || service.includes('dental') || service.includes('tooth')) {\n      return status === 'confirmed' ? 'bg-blue-500 text-white border-blue-600' : 'bg-blue-200 text-blue-800 border-blue-300';\n    } else if (service.includes('göz') || service.includes('eye')) {\n      return status === 'confirmed' ? 'bg-green-500 text-white border-green-600' : 'bg-green-200 text-green-800 border-green-300';\n    } else if (service.includes('qalb') || service.includes('heart') || service.includes('kardio')) {\n      return status === 'confirmed' ? 'bg-red-500 text-white border-red-600' : 'bg-red-200 text-red-800 border-red-300';\n    } else if (service.includes('dəri') || service.includes('skin') || service.includes('dermato')) {\n      return status === 'confirmed' ? 'bg-purple-500 text-white border-purple-600' : 'bg-purple-200 text-purple-800 border-purple-300';\n    } else {\n      // Default colors based on status\n      switch (status) {\n        case 'confirmed': return 'bg-emerald-500 text-white border-emerald-600';\n        case 'pending': return 'bg-amber-200 text-amber-800 border-amber-300';\n        case 'cancelled': return 'bg-gray-400 text-white border-gray-500';\n        default: return 'bg-indigo-200 text-indigo-800 border-indigo-300';\n      }\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200 border-emerald-200';\n      case 'pending': return 'bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-200 border-amber-200';\n      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200 border-gray-200';\n    }\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Bookings & Calendar\" \n          subtitle=\"Manage appointments and calendar view\"\n          onMenuToggle={() => setSidebarOpen(true)} \n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold\">Bookings & Calendar</h1>\n            \n            <div className=\"flex items-center gap-4\">\n              <Select value={calendarView} onValueChange={(value) => setCalendarView(value as CalendarView)}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"month\">Month</SelectItem>\n                  <SelectItem value=\"week\">Week</SelectItem>\n                  <SelectItem value=\"year\">Year</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-new-booking\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    New Booking\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Booking</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"service\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Service</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-service\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"dateTime\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Date & Time</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"datetime-local\" \n                                {...field} \n                                data-testid=\"input-datetime\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"customerName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-customer-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"customerPhone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Phone</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-customer-phone\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"customerEmail\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer Email</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-customer-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notes</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} data-testid=\"input-notes\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={createBookingMutation.isPending}\n                          data-testid=\"button-save-booking\"\n                        >\n                          {createBookingMutation.isPending ? \"Creating...\" : \"Create Booking\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          {/* Calendar Navigation */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentDate(subMonths(currentDate, 1))}\n                  data-testid=\"button-prev-month\"\n                >\n                  <ChevronLeft className=\"h-4 w-4\" />\n                </Button>\n                \n                <h2 className=\"text-lg font-semibold\">\n                  {format(currentDate, 'MMMM yyyy')}\n                </h2>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setCurrentDate(addMonths(currentDate, 1))}\n                  data-testid=\"button-next-month\"\n                >\n                  <ChevronRight className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentDate(new Date())}\n                className=\"mb-4\"\n                data-testid=\"button-today\"\n              >\n                Today\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Colorful Calendar Grid */}\n          <Card className=\"mb-6 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 border-2\">\n            <CardContent className=\"pt-6 max-h-[600px] overflow-y-auto\">\n              {calendarView === 'month' && (\n                <>\n                  {/* Days of Week Header */}\n                  <div className=\"grid grid-cols-7 gap-px mb-4\">\n                    {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((day, index) => (\n                      <div key={day} className={`p-3 text-center text-sm font-bold rounded-lg ${\n                        index === 0 || index === 6 \n                          ? 'text-red-600 bg-red-100 dark:bg-red-900 dark:text-red-200' \n                          : 'text-blue-600 bg-blue-100 dark:bg-blue-900 dark:text-blue-200'\n                      }`}>\n                        {day.slice(0, 3)}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  {/* Calendar Days */}\n                  <div className=\"grid grid-cols-7 gap-2\">\n                    {eachDayOfInterval({\n                      start: startOfWeek(startOfMonth(currentDate)),\n                      end: endOfWeek(endOfMonth(currentDate))\n                    }).map((date) => {\n                      const dayBookings = getBookingsForDate(date);\n                      const isCurrentMonth = isSameMonth(date, currentDate);\n                      const isSelected = selectedDate && isSameDay(date, selectedDate);\n                      const isToday = isSameDay(date, new Date());\n                      \n                      return (\n                        <div\n                          key={date.toISOString()}\n                          className={`min-h-[120px] p-3 rounded-xl cursor-pointer transition-all duration-300 border-2 ${\n                            !isCurrentMonth \n                              ? 'bg-gray-100 text-gray-400 border-gray-200 dark:bg-gray-800 dark:text-gray-600 dark:border-gray-700' \n                              : isSelected\n                                ? 'bg-gradient-to-br from-purple-100 to-pink-100 border-purple-300 shadow-lg transform scale-105 dark:from-purple-900 dark:to-pink-900 dark:border-purple-600'\n                                : isToday\n                                  ? 'bg-gradient-to-br from-blue-100 to-cyan-100 border-blue-400 shadow-md dark:from-blue-900 dark:to-cyan-900 dark:border-blue-600'\n                                  : 'bg-white border-gray-200 hover:bg-gradient-to-br hover:from-gray-50 hover:to-blue-50 hover:border-blue-300 hover:shadow-md dark:bg-gray-900 dark:border-gray-700 dark:hover:from-gray-800 dark:hover:to-blue-900'\n                          }`}\n                          onClick={() => setSelectedDate(date)}\n                          data-testid={`calendar-date-${format(date, 'yyyy-MM-dd')}`}\n                        >\n                          <div className={`text-sm font-bold mb-2 flex items-center justify-center w-6 h-6 rounded-full ${\n                            isToday \n                              ? 'bg-blue-500 text-white' \n                              : isSelected \n                                ? 'bg-purple-500 text-white'\n                                : !isCurrentMonth\n                                  ? 'text-gray-400'\n                                  : 'text-gray-700 dark:text-gray-300'\n                          }`}>\n                            {format(date, 'd')}\n                          </div>\n                          \n                          {/* Day's Bookings */}\n                          <div className=\"space-y-1\">\n                            {dayBookings.slice(0, 3).map((booking: any) => (\n                              <div\n                                key={booking.id}\n                                className={`text-xs p-2 rounded-md cursor-pointer border transition-all hover:scale-105 hover:shadow-md ${getBookingColor(booking)}`}\n                                title={`${booking.service} - ${booking.customerName || 'Unknown'}`}\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setSelectedBooking(booking);\n                                }}\n                                data-testid={`appointment-${booking.id}`}\n                              >\n                                <div className=\"font-medium\">{booking.dateTime ? format(parseISO(booking.dateTime), 'HH:mm') : 'N/A'}</div>\n                                <div className=\"truncate\">{booking.service?.slice(0, 12) || 'Service'}</div>\n                              </div>\n                            ))}\n                            {dayBookings.length > 3 && (\n                              <div className=\"text-xs text-muted-foreground text-center\">\n                                +{dayBookings.length - 3} more\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Selected Date Details */}\n          {selectedDate && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"h-5 w-5\" />\n                  {format(selectedDate, 'EEEE, MMMM d, yyyy')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {(() => {\n                  const dayBookings = getBookingsForDate(selectedDate);\n                  return dayBookings.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-8\">\n                      No bookings scheduled for this date.\n                    </p>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {dayBookings.map((booking: any) => (\n                        <div \n                          key={booking.id} \n                          className={`p-4 border-2 rounded-xl cursor-pointer transition-all hover:shadow-lg hover:scale-[1.02] ${getBookingColor(booking)}`}\n                          onClick={() => setSelectedBooking(booking)}\n                          data-testid={`booking-card-${booking.id}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-3\">\n                                <div className=\"w-3 h-3 rounded-full bg-current opacity-80\"></div>\n                                <span className=\"font-bold text-lg\">\n                                  {booking.dateTime ? format(parseISO(booking.dateTime), 'HH:mm') : 'N/A'}\n                                </span>\n                                <Badge className={`${getStatusColor(booking.status)} font-medium`}>\n                                  {booking.status?.toUpperCase()}\n                                </Badge>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  <MapPin className=\"h-4 w-4\" />\n                                  <span className=\"font-medium\">{booking.service || 'General Service'}</span>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <User className=\"h-4 w-4\" />\n                                  <span>{booking.customerName || 'Anonymous'}</span>\n                                </div>\n                                {booking.customerPhone && (\n                                  <div className=\"flex items-center gap-2\">\n                                    <Phone className=\"h-4 w-4\" />\n                                    <span>{booking.customerPhone}</span>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  );\n                })()}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Selected Appointment Details Modal */}\n          {selectedBooking && (\n            <Dialog open={!!selectedBooking} onOpenChange={() => setSelectedBooking(null)}>\n              <DialogContent className=\"max-w-lg\">\n                <DialogHeader>\n                  <DialogTitle className=\"flex items-center gap-2\">\n                    <CalendarIcon className=\"h-5 w-5\" />\n                    Appointment Details\n                  </DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-6\">\n                  {/* Time & Date */}\n                  <div className=\"flex items-center gap-4 p-4 bg-muted/30 rounded-lg\">\n                    <Clock className=\"h-8 w-8 text-primary\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\">\n                        {selectedBooking.dateTime ? format(parseISO(selectedBooking.dateTime), 'HH:mm') : 'N/A'}\n                      </p>\n                      <p className=\"text-muted-foreground\">\n                        {selectedBooking.dateTime ? format(parseISO(selectedBooking.dateTime), 'EEEE, MMMM d, yyyy') : 'N/A'}\n                      </p>\n                    </div>\n                    <Badge className={`ml-auto ${getStatusColor(selectedBooking.status)}`}>\n                      {selectedBooking.status?.toUpperCase()}\n                    </Badge>\n                  </div>\n\n                  {/* Service & Customer */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium\">Service</p>\n                        <p className=\"text-lg\">{selectedBooking.service || 'General Consultation'}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <User className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium\">Customer</p>\n                        <p className=\"text-lg\">{selectedBooking.customerName || 'Anonymous'}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Phone className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium\">Phone</p>\n                        <p className=\"text-lg\">{selectedBooking.customerPhone || 'Not provided'}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-3\">\n                      <Mail className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium\">Email</p>\n                        <p className=\"text-lg\">{selectedBooking.customerEmail || 'Not provided'}</p>\n                      </div>\n                    </div>\n\n                    {selectedBooking.notes && (\n                      <div className=\"p-4 bg-muted/20 rounded-lg\">\n                        <p className=\"font-medium mb-2\">Notes</p>\n                        <p className=\"text-muted-foreground\">{selectedBooking.notes}</p>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex gap-2\">\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\"\n                          className=\"flex-1\"\n                          onClick={() => {\n                            form.reset({\n                              service: selectedBooking.service || \"\",\n                              dateTime: selectedBooking.dateTime ? (function() {\n                                try {\n                                  return format(parseISO(selectedBooking.dateTime), \"yyyy-MM-dd'T'HH:mm\");\n                                } catch {\n                                  return \"\";\n                                }\n                              })() : \"\",\n                              customerName: selectedBooking.customerName || \"\",\n                              customerPhone: selectedBooking.customerPhone || \"\",\n                              customerEmail: selectedBooking.customerEmail || \"\",\n                              notes: selectedBooking.notes || \"\",\n                              status: selectedBooking.status || \"pending\",\n                            });\n                          }}\n                          data-testid=\"button-edit-appointment\"\n                        >\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit Appointment\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle>Edit Booking</DialogTitle>\n                        </DialogHeader>\n                        <Form {...form}>\n                          <form onSubmit={(e) => {\n                            e.preventDefault();\n                            const formData = form.getValues();\n                            updateBookingMutation.mutate({ id: selectedBooking.id, ...formData });\n                          }} className=\"space-y-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"service\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Service</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} data-testid=\"input-service\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            \n                            <FormField\n                              control={form.control}\n                              name=\"dateTime\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Date & Time</FormLabel>\n                                  <FormControl>\n                                    <Input \n                                      type=\"datetime-local\" \n                                      {...field} \n                                      data-testid=\"input-datetime\"\n                                    />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            \n                            <FormField\n                              control={form.control}\n                              name=\"customerName\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Customer Name</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} data-testid=\"input-customer-name\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            \n                            <FormField\n                              control={form.control}\n                              name=\"status\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Status</FormLabel>\n                                  <Select onValueChange={field.onChange} value={field.value}>\n                                    <FormControl>\n                                      <SelectTrigger data-testid=\"select-status\">\n                                        <SelectValue placeholder=\"Select status\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      <SelectItem value=\"pending\">Pending</SelectItem>\n                                      <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            \n                            <div className=\"flex justify-end space-x-2\">\n                              <Button \n                                type=\"submit\" \n                                disabled={updateBookingMutation.isPending}\n                                data-testid=\"button-save-booking\"\n                              >\n                                {updateBookingMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                              </Button>\n                            </div>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                    <Button \n                      variant=\"secondary\"\n                      className=\"flex-1\"\n                      onClick={() => setSelectedBooking(null)}\n                    >\n                      Close\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":33653},"client/src/pages/channels.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Plus, \n  Smartphone, \n  Globe, \n  Facebook, \n  Instagram, \n  Settings,\n  CheckCircle,\n  AlertCircle,\n  MessageCircle\n} from \"lucide-react\";\n\nconst channelFormSchema = z.object({\n  type: z.string().min(1, \"Channel type is required\"),\n  name: z.string().min(1, \"Channel name is required\"),\n  config: z.object({}).optional(),\n});\n\nexport default function Channels() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [configDialogOpen, setConfigDialogOpen] = useState(false);\n  const [selectedChannel, setSelectedChannel] = useState<any>(null);\n  const [configValues, setConfigValues] = useState<any>({});\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: channels, isLoading: channelsLoading } = useQuery({\n    queryKey: [\"/api/channels\"],\n    enabled: isAuthenticated,\n  });\n\n  const form = useForm<z.infer<typeof channelFormSchema>>({\n    resolver: zodResolver(channelFormSchema),\n    defaultValues: {\n      type: \"\",\n      name: \"\",\n      config: {},\n    },\n  });\n\n  const createChannelMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof channelFormSchema>) => {\n      await apiRequest(\"POST\", \"/api/channels\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/channels\"] });\n      toast({\n        title: \"Success\",\n        description: \"Channel created successfully\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof channelFormSchema>) => {\n    createChannelMutation.mutate(data);\n  };\n\n  const handleConfigureChannel = (channel: any) => {\n    setSelectedChannel(channel);\n    // Initialize with existing config or empty values\n    setConfigValues(channel.config || {});\n    setConfigDialogOpen(true);\n  };\n\n  const handleConfigValueChange = (key: string, value: string) => {\n    setConfigValues((prev: any) => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const saveConfiguration = async () => {\n    try {\n      await apiRequest(\"PUT\", `/api/channels/${selectedChannel.id}/config`, {\n        config: configValues\n      });\n      \n      toast({\n        title: \"Configuration Saved\",\n        description: `${selectedChannel.name} channel settings have been updated`,\n      });\n      \n      // Refresh channels list\n      queryClient.invalidateQueries({ queryKey: [\"/api/channels\"] });\n      setConfigDialogOpen(false);\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save configuration: \" + error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getConfigFields = (channelType: string) => {\n    switch (channelType) {\n      case 'whatsapp':\n        return [\n          { key: 'accessToken', label: 'WhatsApp Business API Access Token', type: 'password', placeholder: 'Enter your permanent access token' },\n          { key: 'phoneNumberId', label: 'Phone Number ID', type: 'text', placeholder: 'Your WhatsApp Business phone number ID' },\n          { key: 'verifyToken', label: 'Webhook Verify Token', type: 'text', placeholder: 'Custom verification token' },\n          { key: 'businessAccountId', label: 'Business Account ID', type: 'text', placeholder: 'Your WhatsApp Business Account ID' }\n        ];\n      case 'facebook':\n        return [\n          { key: 'pageAccessToken', label: 'Page Access Token', type: 'password', placeholder: 'Generate from Facebook Developers' },\n          { key: 'pageId', label: 'Facebook Page ID', type: 'text', placeholder: 'Your Facebook Page ID' },\n          { key: 'appSecret', label: 'App Secret', type: 'password', placeholder: 'Your Facebook App Secret' },\n          { key: 'verifyToken', label: 'Webhook Verify Token', type: 'text', placeholder: 'Custom verification token' }\n        ];\n      case 'instagram':\n        return [\n          { key: 'pageAccessToken', label: 'Page Access Token (with Instagram permissions)', type: 'password', placeholder: 'Token from Meta for Developers' },\n          { key: 'instagramAccountId', label: 'Instagram Business Account ID', type: 'text', placeholder: 'Your Instagram Business Account ID' },\n          { key: 'pageId', label: 'Connected Facebook Page ID', type: 'text', placeholder: 'Facebook Page linked to Instagram' },\n          { key: 'verifyToken', label: 'Webhook Verify Token', type: 'text', placeholder: 'Custom verification token' }\n        ];\n      case 'telegram':\n        return [\n          { key: 'botToken', label: 'Bot Token', type: 'password', placeholder: 'Token from @BotFather (e.g., 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11)' },\n          { key: 'botUsername', label: 'Bot Username', type: 'text', placeholder: 'Your bot username (e.g., @YourBusinessBot)' },\n          { key: 'webhookSecret', label: 'Webhook Secret Token', type: 'password', placeholder: 'Custom secret for webhook security' }\n        ];\n      case 'website':\n        return [\n          { key: 'widgetTitle', label: 'Chat Widget Title', type: 'text', placeholder: 'e.g., \"Chat with us!\"' },\n          { key: 'welcomeMessage', label: 'Welcome Message', type: 'textarea', placeholder: 'Hi! How can I help you today?' },\n          { key: 'primaryColor', label: 'Primary Color', type: 'color', placeholder: '#007bff' },\n          { key: 'position', label: 'Widget Position', type: 'select', options: [\n            { value: 'bottom-right', label: 'Bottom Right' },\n            { value: 'bottom-left', label: 'Bottom Left' },\n            { value: 'top-right', label: 'Top Right' },\n            { value: 'top-left', label: 'Top Left' }\n          ]}\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const getConfigurationSteps = (channelType: string) => {\n    switch (channelType) {\n      case 'whatsapp':\n        return [\n          'Go to https://business.whatsapp.com and sign up for WhatsApp Business API',\n          'In Meta Business Manager, go to \"System Users\" and create a new system user',\n          'Generate a permanent access token for WhatsApp Business API',\n          'Add your phone number: Go to WhatsApp Manager → Phone Numbers → Add Phone Number',\n          'Set webhook URL in Meta for Developers: https://developers.facebook.com → Your App → WhatsApp → Configuration',\n          `Enter webhook URL: ${window.location.origin}/api/webhooks/whatsapp`,\n          'Subscribe to webhook fields: messages, message_deliveries, message_reads',\n          'Verify webhook with the verification token provided in your app settings',\n          'Test by sending a message to your WhatsApp Business number'\n        ];\n      case 'facebook':\n        return [\n          'Go to https://developers.facebook.com and create a new app',\n          'Select \"Business\" as app type and add Messenger product',\n          'Go to Messenger → Settings in your app dashboard',\n          'Generate a Page Access Token for your Facebook Page',\n          'Set up webhooks: Click \"Add Callback URL\"',\n          `Enter webhook URL: ${window.location.origin}/api/webhooks/facebook`,\n          'Subscribe to these webhook fields: messages, messaging_postbacks, messaging_optins',\n          'In your Facebook Page settings, go to Advanced Messaging',\n          'Connect your page to your app and enable messaging',\n          'Test by sending a message to your Facebook Page'\n        ];\n      case 'instagram':\n        return [\n          'Go to https://business.facebook.com and connect your Instagram Business account to a Facebook Page',\n          'Visit https://developers.facebook.com and create or select your app',\n          'Click \"Add Product\" and add \"Messenger\" (Instagram messaging uses Facebook Messenger API)',\n          'In Messenger settings, scroll down to \"Instagram\" section',\n          'Click \"Add Instagram Account\" and connect your Instagram Business account',\n          'Generate a Page Access Token that includes Instagram permissions',\n          'Set up webhooks: In Messenger → Settings → Webhooks, click \"Add Callback URL\"',\n          `Enter webhook URL: ${window.location.origin}/api/webhooks/instagram`,\n          'Subscribe to webhook events: messages, messaging_postbacks, messaging_optins',\n          'In the Instagram section, enable \"instagram_messaging\" webhook subscription',\n          'Test by sending a direct message to your Instagram Business account'\n        ];\n      case 'telegram':\n        return [\n          'Open Telegram and search for @BotFather',\n          'Start a chat with BotFather and send /newbot command',\n          'Choose a name for your bot (e.g., \"Your Business Assistant\")',\n          'Choose a username for your bot (must end with \"bot\", e.g., \"yourbusinessbot\")',\n          'BotFather will give you a Bot Token - copy and save it securely',\n          'Set bot description with /setdescription command for better user experience',\n          'Configure bot commands with /setcommands (optional but recommended)',\n          `Set webhook URL: Send a POST request to https://api.telegram.org/bot<YOUR_BOT_TOKEN>/setWebhook`,\n          `Webhook URL should be: ${window.location.origin}/api/webhooks/telegram`,\n          'Include your webhook secret token in the request for security',\n          'Test by sending a message to your bot on Telegram',\n          'Enable inline mode with /setinline if you want users to use the bot in any chat',\n          'Set bot profile photo with /setuserpic for professional appearance'\n        ];\n      case 'website':\n        return [\n          'Copy the embed code provided below',\n          'Open your website files or CMS admin panel',\n          'Locate your main template file (usually index.html or footer template)',\n          'Paste the code just before the closing </body> tag',\n          'Save and publish your website changes',\n          'Test the chat widget appears in bottom-right corner',\n          'Customize colors and position in the widget settings if needed'\n        ];\n      default:\n        return ['Configuration steps not available'];\n    }\n  };\n\n  const getChannelIcon = (type: string) => {\n    switch (type) {\n      case 'whatsapp':\n        return <Smartphone className=\"h-6 w-6 text-green-500\" />;\n      case 'website':\n        return <Globe className=\"h-6 w-6 text-purple-600\" />;\n      case 'facebook':\n        return <Facebook className=\"h-6 w-6 text-blue-600\" />;\n      case 'instagram':\n        return <Instagram className=\"h-6 w-6 text-pink-500\" />;\n      case 'telegram':\n        return <MessageCircle className=\"h-6 w-6 text-blue-400\" />;\n      default:\n        return <Settings className=\"h-6 w-6 text-gray-500\" />;\n    }\n  };\n\n  const getChannelStatus = (channel: any) => {\n    // For demo purposes, website is always active, others need setup\n    if (channel.type === 'website' || channel.isActive) {\n      return { status: 'active', label: 'Active', variant: 'default' as const };\n    }\n    return { status: 'setup_required', label: 'Setup Required', variant: 'secondary' as const };\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden md:ml-0\">\n        <Header \n          title=\"Channels\" \n          subtitle=\"Manage your communication channels and integrations\"\n          onMenuToggle={() => setSidebarOpen(!sidebarOpen)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n            {/* Add Channel Button */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div>\n                <h2 className=\"text-xl md:text-2xl font-semibold text-foreground\">Connected Channels</h2>\n                <p className=\"text-muted-foreground text-sm md:text-base\">Connect and manage your customer communication channels</p>\n              </div>\n              \n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"w-full sm:w-auto\" data-testid=\"button-add-channel\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Channel\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Channel</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Channel Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-channel-type\">\n                                  <SelectValue placeholder=\"Select channel type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"website\">Website Widget</SelectItem>\n                                <SelectItem value=\"whatsapp\">WhatsApp Business</SelectItem>\n                                <SelectItem value=\"facebook\">Facebook Messenger</SelectItem>\n                                <SelectItem value=\"instagram\">Instagram DM</SelectItem>\n                                <SelectItem value=\"telegram\">Telegram Bot</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Channel Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"e.g., Main Website, Support WhatsApp\" \n                                {...field} \n                                data-testid=\"input-channel-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsDialogOpen(false)}\n                          data-testid=\"button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          type=\"submit\" \n                          disabled={createChannelMutation.isPending}\n                          data-testid=\"button-create-channel\"\n                        >\n                          {createChannelMutation.isPending ? \"Creating...\" : \"Create Channel\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Configuration Dialog */}\n              <Dialog open={configDialogOpen} onOpenChange={setConfigDialogOpen}>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>\n                      Configure {selectedChannel?.name}\n                    </DialogTitle>\n                    <p className=\"text-muted-foreground\">\n                      Follow these steps to connect your {selectedChannel?.type?.replace('_', ' ')} channel\n                    </p>\n                  </DialogHeader>\n                  <div className=\"space-y-6\">\n                    {selectedChannel && (\n                      <>\n                        <div className=\"flex items-center space-x-3 p-4 bg-muted/30 rounded-lg\">\n                          {getChannelIcon(selectedChannel.type)}\n                          <div>\n                            <h3 className=\"font-semibold\">{selectedChannel.name}</h3>\n                            <p className=\"text-sm text-muted-foreground capitalize\">\n                              {selectedChannel.type.replace('_', ' ')} Channel\n                            </p>\n                          </div>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-semibold mb-3\">Configuration Fields:</h4>\n                          <div className=\"space-y-4\">\n                            {getConfigFields(selectedChannel.type).map((field) => (\n                              <div key={field.key}>\n                                <label className=\"block text-sm font-medium mb-1\">{field.label}</label>\n                                {field.type === 'textarea' ? (\n                                  <Textarea\n                                    value={configValues[field.key] || ''}\n                                    onChange={(e) => handleConfigValueChange(field.key, e.target.value)}\n                                    placeholder={field.placeholder}\n                                    className=\"w-full\"\n                                  />\n                                ) : field.type === 'select' ? (\n                                  <Select\n                                    value={configValues[field.key] || ''}\n                                    onValueChange={(value) => handleConfigValueChange(field.key, value)}\n                                  >\n                                    <SelectTrigger>\n                                      <SelectValue placeholder={field.placeholder} />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {field.options?.map((option) => (\n                                        <SelectItem key={option.value} value={option.value}>\n                                          {option.label}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                ) : (\n                                  <Input\n                                    type={field.type}\n                                    value={configValues[field.key] || ''}\n                                    onChange={(e) => handleConfigValueChange(field.key, e.target.value)}\n                                    placeholder={field.placeholder}\n                                    className=\"w-full\"\n                                  />\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        {/* Configuration Instructions (Collapsible) */}\n                        <div>\n                          <details className=\"group\">\n                            <summary className=\"cursor-pointer font-semibold text-sm text-muted-foreground hover:text-foreground\">\n                              ▶ View Setup Instructions\n                            </summary>\n                            <div className=\"mt-3 space-y-2\">\n                              <ol className=\"space-y-2\">\n                                {getConfigurationSteps(selectedChannel.type).map((step, index) => (\n                                  <li key={index} className=\"flex items-start space-x-2\">\n                                    <span className=\"flex-shrink-0 w-5 h-5 bg-muted text-muted-foreground rounded-full flex items-center justify-center text-xs font-medium\">\n                                      {index + 1}\n                                    </span>\n                                    <span className=\"text-xs text-muted-foreground\">{step}</span>\n                                  </li>\n                                ))}\n                              </ol>\n                            </div>\n                          </details>\n                        </div>\n\n                        {selectedChannel.type === 'website' && (\n                          <div className=\"space-y-3\">\n                            <h4 className=\"font-semibold\">Website Embed Code:</h4>\n                            <div className=\"p-4 bg-muted rounded-lg\">\n                              <code className=\"text-sm text-foreground\">\n                                {`<script>\n  (function() {\n    var chatWidget = document.createElement('div');\n    chatWidget.id = 'ai-receptionist-widget';\n    chatWidget.innerHTML = '<iframe src=\"${window.location.origin}/widget/${selectedChannel.id}\" width=\"350\" height=\"500\" frameborder=\"0\"></iframe>';\n    chatWidget.style.cssText = 'position:fixed;bottom:20px;right:20px;z-index:9999;';\n    document.body.appendChild(chatWidget);\n  })();\n</script>`}\n                              </code>\n                            </div>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => {\n                                navigator.clipboard.writeText(`<script>\n  (function() {\n    var chatWidget = document.createElement('div');\n    chatWidget.id = 'ai-receptionist-widget';\n    chatWidget.innerHTML = '<iframe src=\"${window.location.origin}/widget/${selectedChannel.id}\" width=\"350\" height=\"500\" frameborder=\"0\"></iframe>';\n    chatWidget.style.cssText = 'position:fixed;bottom:20px;right:20px;z-index:9999;';\n    document.body.appendChild(chatWidget);\n  })();\n</script>`);\n                                toast({\n                                  title: \"Copied!\",\n                                  description: \"Embed code copied to clipboard\",\n                                });\n                              }}\n                            >\n                              Copy Embed Code\n                            </Button>\n                          </div>\n                        )}\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => setConfigDialogOpen(false)}\n                          >\n                            Close\n                          </Button>\n                          <Button \n                            onClick={saveConfiguration}\n                            disabled={Object.keys(configValues).length === 0}\n                          >\n                            Save Configuration\n                          </Button>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Channels Grid */}\n            {channelsLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : channels?.length === 0 ? (\n              <Card>\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <Settings className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No channels configured</h3>\n                  <p className=\"text-muted-foreground text-center mb-4\">\n                    Add your first communication channel to start receiving customer messages.\n                  </p>\n                  <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-channel\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Your First Channel\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n                {channels?.map((channel: any) => {\n                  const { status, label, variant } = getChannelStatus(channel);\n                  \n                  return (\n                    <Card key={channel.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            {getChannelIcon(channel.type)}\n                            <div>\n                              <CardTitle className=\"text-lg\" data-testid={`text-channel-name-${channel.id}`}>\n                                {channel.name}\n                              </CardTitle>\n                              <p className=\"text-sm text-muted-foreground capitalize\">\n                                {channel.type.replace('_', ' ')}\n                              </p>\n                            </div>\n                          </div>\n                          <Badge variant={variant}>\n                            {status === 'active' ? <CheckCircle className=\"h-3 w-3 mr-1\" /> : <AlertCircle className=\"h-3 w-3 mr-1\" />}\n                            {label}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          {status === 'active' ? (\n                            <div className=\"text-sm text-muted-foreground\">\n                              <p>Status: Ready to receive messages</p>\n                              <p>Created: {new Date(channel.createdAt).toLocaleDateString()}</p>\n                            </div>\n                          ) : (\n                            <div className=\"text-sm text-muted-foreground\">\n                              <p>Configuration required to activate this channel</p>\n                            </div>\n                          )}\n                          \n                          <div className=\"flex flex-col sm:flex-row gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"flex-1\"\n                              onClick={() => handleConfigureChannel(channel)}\n                              data-testid={`button-configure-${channel.id}`}\n                            >\n                              <Settings className=\"h-4 w-4 mr-2\" />\n                              Configure\n                            </Button>\n                            {channel.type === 'website' && (\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                data-testid={`button-embed-code-${channel.id}`}\n                              >\n                                Embed Code\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n\n            {/* Setup Instructions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Channel Setup Guide</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">Website Widget</h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Add a chat widget to your website for instant customer support.\n                    </p>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Copy the embed code</li>\n                      <li>• Paste before closing &lt;/body&gt; tag</li>\n                      <li>• Customize appearance in settings</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">WhatsApp Business</h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Connect your WhatsApp Business account for messaging.\n                    </p>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• WhatsApp Business account required</li>\n                      <li>• Facebook Business Manager access</li>\n                      <li>• API approval process (5-7 days)</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">Facebook Messenger</h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Integrate Facebook Messenger for your page.\n                    </p>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Facebook Page required</li>\n                      <li>• Admin access to page</li>\n                      <li>• App review for advanced features</li>\n                    </ul>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-semibold text-foreground mb-2\">Instagram DM</h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Connect Instagram Direct Messages to your AI.\n                    </p>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Instagram Business account</li>\n                      <li>• Connected to Facebook Page</li>\n                      <li>• Messenger API integration</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":32638},"client/src/pages/conversations.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { MessageSquare, User, Clock, Search, Filter } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Conversations() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [, setLocation] = useLocation();\n  const { lastMessage } = useWebSocket();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: conversations, isLoading: conversationsLoading } = useQuery({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n\n  // Listen for new conversations and invalidate cache\n  useEffect(() => {\n    if (lastMessage?.type === 'new_conversation') {\n      console.log('New conversation received, refreshing list...');\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n    }\n  }, [lastMessage]);\n\n  const filteredConversations = Array.isArray(conversations) \n    ? conversations.filter((conv: any) => {\n        if (!searchTerm) return true;\n        const search = searchTerm.toLowerCase();\n        return (\n          conv.channel?.toLowerCase().includes(search) ||\n          conv.channelName?.toLowerCase().includes(search) ||\n          conv.channelType?.toLowerCase().includes(search) ||\n          conv.customerId?.toLowerCase().includes(search) ||\n          conv.id?.toLowerCase().includes(search) ||\n          conv.status?.toLowerCase().includes(search)\n        );\n      })\n    : [];\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden md:ml-0\">\n        <Header \n          title=\"Conversations\" \n          subtitle=\"Manage all customer conversations across channels\"\n          onMenuToggle={() => setSidebarOpen(!sidebarOpen)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n            {/* Search and Filters */}\n            <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3 sm:gap-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search conversations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-conversations\"\n                />\n              </div>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\" data-testid=\"button-filter\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <span className=\"hidden sm:inline\">Filter</span>\n              </Button>\n            </div>\n\n            {/* Conversations List */}\n            {conversationsLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : filteredConversations.length === 0 ? (\n              <Card>\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <MessageSquare className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No conversations found</h3>\n                  <p className=\"text-muted-foreground text-center\">\n                    {searchTerm ? \"No conversations match your search.\" : \"Conversations will appear here when customers start chatting.\"}\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredConversations.map((conversation: any) => (\n                  <Card key={conversation.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-4 md:p-6\">\n                      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                        <div className=\"flex items-center space-x-3 md:space-x-4\">\n                          <div className=\"w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <User className=\"h-6 w-6 text-primary\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-foreground\" data-testid={`text-conversation-${conversation.id}`}>\n                              Conversation {conversation.id.slice(0, 8)}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Customer ID: {conversation.customerId?.slice(0, 8) || \"Unknown\"}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex flex-wrap items-center gap-2 md:gap-4\">\n                          <Badge \n                            variant={conversation.channel === 'whatsapp' ? 'default' : \n                                   conversation.channel === 'website' ? 'secondary' : 'outline'}\n                          >\n                            {conversation.channel}\n                          </Badge>\n                          \n                          <Badge \n                            variant={conversation.status === 'active' ? 'default' : 'secondary'}\n                          >\n                            {conversation.status}\n                          </Badge>\n                          \n                          <div className=\"text-right\">\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Clock className=\"h-4 w-4 mr-1\" />\n                              {conversation.lastMessageAt ? \n                                format(new Date(conversation.lastMessageAt), 'MMM d, HH:mm') : \n                                'No messages'\n                              }\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Created {format(new Date(conversation.createdAt), 'MMM d, yyyy')}\n                            </p>\n                          </div>\n                          \n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => setLocation(`/conversations/${conversation.id}`)}\n                            data-testid={`button-view-conversation-${conversation.id}`}\n                          >\n                            View Chat\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8473},"client/src/pages/customers.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Users, Search, Filter, Mail, Phone, MessageSquare } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Customers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: customers, isLoading: customersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/customers\"],\n    enabled: isAuthenticated,\n  });\n\n  const filteredCustomers = customers?.filter((customer: any) =>\n    customer.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.phone?.includes(searchTerm)\n  ) || [];\n\n  const getSourceBadge = (source: string) => {\n    switch (source) {\n      case 'whatsapp':\n        return <Badge variant=\"default\" className=\"bg-green-500\">WhatsApp</Badge>;\n      case 'website':\n        return <Badge variant=\"secondary\" className=\"bg-purple-500 text-white\">Website</Badge>;\n      case 'facebook':\n        return <Badge variant=\"outline\" className=\"border-blue-500 text-blue-600\">Messenger</Badge>;\n      case 'instagram':\n        return <Badge variant=\"outline\" className=\"border-pink-500 text-pink-600\">Instagram</Badge>;\n      default:\n        return <Badge variant=\"outline\">{source}</Badge>;\n    }\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={false} onToggle={() => {}} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Customers\" \n          subtitle=\"Manage your customer database and relationships\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Customer Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"h-10 w-10 text-primary\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Customers</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-customers\">\n                        {customers?.length || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <MessageSquare className=\"h-10 w-10 text-chart-2\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">From WhatsApp</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-whatsapp-customers\">\n                        {customers?.filter((c: any) => c.source === 'whatsapp').length || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Mail className=\"h-10 w-10 text-chart-4\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">From Website</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-website-customers\">\n                        {customers?.filter((c: any) => c.source === 'website').length || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-10 w-10 text-chart-1\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">With Contact Info</p>\n                      <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-contacted-customers\">\n                        {customers?.filter((c: any) => c.email || c.phone).length || 0}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Search and Filters */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search customers by name, email, or phone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-customers\"\n                />\n              </div>\n              <Button variant=\"outline\" data-testid=\"button-filter\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filter\n              </Button>\n              <Button variant=\"outline\" data-testid=\"button-export\">\n                Export CSV\n              </Button>\n            </div>\n\n            {/* Customers List */}\n            {customersLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : filteredCustomers.length === 0 ? (\n              <Card>\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <Users className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                    {searchTerm ? \"No customers found\" : \"No customers yet\"}\n                  </h3>\n                  <p className=\"text-muted-foreground text-center\">\n                    {searchTerm \n                      ? \"No customers match your search criteria.\" \n                      : \"Customer profiles will be created automatically when they start conversations with your AI receptionist.\"\n                    }\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredCustomers.map((customer: any) => (\n                  <Card key={customer.id} className=\"hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                            <Users className=\"h-6 w-6 text-primary\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-foreground\" data-testid={`text-customer-name-${customer.id}`}>\n                              {customer.name || \"Unknown Customer\"}\n                            </h3>\n                            <div className=\"flex items-center space-x-4 mt-1\">\n                              {customer.email && (\n                                <div className=\"flex items-center text-sm text-muted-foreground\">\n                                  <Mail className=\"h-4 w-4 mr-1\" />\n                                  {customer.email}\n                                </div>\n                              )}\n                              {customer.phone && (\n                                <div className=\"flex items-center text-sm text-muted-foreground\">\n                                  <Phone className=\"h-4 w-4 mr-1\" />\n                                  {customer.phone}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4\">\n                          {getSourceBadge(customer.source)}\n                          \n                          <div className=\"text-right\">\n                            <p className=\"text-sm text-muted-foreground\">\n                              Customer since\n                            </p>\n                            <p className=\"text-sm font-medium text-foreground\">\n                              {format(new Date(customer.createdAt), 'MMM d, yyyy')}\n                            </p>\n                          </div>\n                          \n                          <div className=\"flex space-x-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => {\n                                toast({\n                                  title: \"Customer Profile\",\n                                  description: `Viewing profile for ${customer.name || 'Unknown Customer'}`,\n                                });\n                                // TODO: Navigate to customer detail page or open modal\n                              }}\n                              data-testid={`button-view-customer-${customer.id}`}\n                            >\n                              View Profile\n                            </Button>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => {\n                                toast({\n                                  title: \"Start Conversation\",\n                                  description: `Starting conversation with ${customer.name || 'Unknown Customer'}`,\n                                });\n                                // TODO: Navigate to conversation or create new conversation\n                              }}\n                              data-testid={`button-message-customer-${customer.id}`}\n                            >\n                              <MessageSquare className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Customer metadata */}\n                      {customer.metadata && Object.keys(customer.metadata).length > 0 && (\n                        <div className=\"mt-4 p-3 bg-muted/30 rounded-lg\">\n                          <h4 className=\"text-sm font-medium text-foreground mb-2\">Additional Information</h4>\n                          <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                            {Object.entries(customer.metadata).map(([key, value]) => (\n                              <div key={key}>\n                                <span className=\"text-muted-foreground capitalize\">{key.replace('_', ' ')}: </span>\n                                <span className=\"text-foreground\">{String(value)}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12838},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatsGrid from \"@/components/dashboard/stats-grid\";\nimport ChannelsOverview from \"@/components/dashboard/channels-overview\";\nimport RecentActivity from \"@/components/dashboard/recent-activity\";\nimport LiveConversations from \"@/components/dashboard/live-conversations\";\nimport ChatWidgetPreview from \"@/components/chat/chat-widget-preview\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden md:ml-0\">\n        <Header \n          title=\"Dashboard\" \n          subtitle=\"Monitor your AI receptionist performance\" \n          onMenuToggle={() => setSidebarOpen(!sidebarOpen)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-4 md:p-6 space-y-4 md:space-y-6\">\n            {/* Stats Overview */}\n            <StatsGrid />\n\n            {/* Active Channels & Recent Activity */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6\">\n              <ChannelsOverview />\n              <RecentActivity />\n            </div>\n\n            {/* Live Conversations */}\n            <LiveConversations />\n\n            {/* Chat Widget Preview */}\n            <ChatWidgetPreview />\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2449},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Bot, \n  MessageSquare, \n  Calendar, \n  Users, \n  BarChart3,\n  CheckCircle,\n  ArrowRight,\n  Smartphone,\n  Globe,\n  Facebook,\n  Instagram\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted\">\n      {/* Header */}\n      <header className=\"bg-card/80 backdrop-blur-sm border-b border-border\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Bot className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-foreground\">AI Receptionist</h1>\n              <p className=\"text-xs text-muted-foreground\">Business Automation</p>\n            </div>\n          </div>\n          <Button onClick={handleLogin} data-testid=\"button-login\">\n            Get Started\n            <ArrowRight className=\"w-4 h-4 ml-2\" />\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-16 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl font-bold text-foreground mb-6\">\n            Automate Your Customer Communications with AI\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Connect WhatsApp, Facebook, Instagram, and your website to one powerful AI receptionist. \n            Handle bookings, answer questions, and manage customer relationships 24/7.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-hero-start\">\n              Start Free Trial\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"button-demo\">\n              Watch Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Everything You Need to Automate Customer Service\n          </h2>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Our AI receptionist handles everything from initial contact to booking confirmations, \n            keeping your customers happy while you focus on growing your business.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <Card className=\"border-border hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <MessageSquare className=\"w-10 h-10 text-primary mb-4\" />\n              <CardTitle>Multi-Channel Support</CardTitle>\n              <CardDescription>\n                Connect WhatsApp, Facebook Messenger, Instagram DMs, and website chat in one dashboard\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-border hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <Bot className=\"w-10 h-10 text-primary mb-4\" />\n              <CardTitle>Intelligent AI Responses</CardTitle>\n              <CardDescription>\n                Powered by GPT-5, our AI understands context and provides human-like customer service\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-border hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <Calendar className=\"w-10 h-10 text-primary mb-4\" />\n              <CardTitle>Automated Booking</CardTitle>\n              <CardDescription>\n                Let customers book appointments directly through chat without human intervention\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-border hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <Users className=\"w-10 h-10 text-primary mb-4\" />\n              <CardTitle>Customer CRM</CardTitle>\n              <CardDescription>\n                Automatically collect and organize customer data from all conversation channels\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-border hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <BarChart3 className=\"w-10 h-10 text-primary mb-4\" />\n              <CardTitle>Real-time Analytics</CardTitle>\n              <CardDescription>\n                Track conversation volumes, booking rates, and customer satisfaction metrics\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card className=\"border-border hover:shadow-md transition-shadow\">\n            <CardHeader>\n              <Globe className=\"w-10 h-10 text-primary mb-4\" />\n              <CardTitle>Easy Integration</CardTitle>\n              <CardDescription>\n                Simple setup process with embeddable widgets and API connections\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n      </section>\n\n      {/* Supported Platforms */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Connect All Your Customer Touchpoints\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Integrate with the platforms your customers already use\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 max-w-2xl mx-auto\">\n          <div className=\"flex flex-col items-center p-6 rounded-lg bg-card border border-border\">\n            <Smartphone className=\"w-12 h-12 text-green-500 mb-3\" />\n            <span className=\"font-medium\">WhatsApp</span>\n          </div>\n          <div className=\"flex flex-col items-center p-6 rounded-lg bg-card border border-border\">\n            <Facebook className=\"w-12 h-12 text-blue-600 mb-3\" />\n            <span className=\"font-medium\">Messenger</span>\n          </div>\n          <div className=\"flex flex-col items-center p-6 rounded-lg bg-card border border-border\">\n            <Instagram className=\"w-12 h-12 text-pink-500 mb-3\" />\n            <span className=\"font-medium\">Instagram</span>\n          </div>\n          <div className=\"flex flex-col items-center p-6 rounded-lg bg-card border border-border\">\n            <Globe className=\"w-12 h-12 text-purple-600 mb-3\" />\n            <span className=\"font-medium\">Website</span>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Simple, Transparent Pricing\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Pay only for what you use. No hidden fees or long-term contracts.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          <Card className=\"border-border\">\n            <CardHeader>\n              <CardTitle>Starter</CardTitle>\n              <CardDescription>Perfect for small businesses</CardDescription>\n              <div className=\"text-3xl font-bold text-foreground\">$29<span className=\"text-lg text-muted-foreground\">/mo</span></div>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>1,000 messages/month</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>2 connected channels</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Basic analytics</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Email support</span>\n                </li>\n              </ul>\n              <Button className=\"w-full mt-6\" variant=\"outline\" data-testid=\"button-starter\">\n                Start Free Trial\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-primary shadow-md\">\n            <CardHeader>\n              <div className=\"bg-primary text-primary-foreground text-sm px-3 py-1 rounded-full w-fit mb-2\">\n                Most Popular\n              </div>\n              <CardTitle>Professional</CardTitle>\n              <CardDescription>For growing businesses</CardDescription>\n              <div className=\"text-3xl font-bold text-foreground\">$79<span className=\"text-lg text-muted-foreground\">/mo</span></div>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>5,000 messages/month</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Unlimited channels</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Advanced analytics</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Priority support</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Custom AI training</span>\n                </li>\n              </ul>\n              <Button className=\"w-full mt-6\" data-testid=\"button-professional\">\n                Start Free Trial\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-border\">\n            <CardHeader>\n              <CardTitle>Enterprise</CardTitle>\n              <CardDescription>For large organizations</CardDescription>\n              <div className=\"text-3xl font-bold text-foreground\">$199<span className=\"text-lg text-muted-foreground\">/mo</span></div>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>20,000 messages/month</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Unlimited channels</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Advanced analytics</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>24/7 phone support</span>\n                </li>\n                <li className=\"flex items-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500 mr-2\" />\n                  <span>Custom integrations</span>\n                </li>\n              </ul>\n              <Button className=\"w-full mt-6\" variant=\"outline\" data-testid=\"button-enterprise\">\n                Contact Sales\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"bg-primary/5 py-16\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Ready to Transform Your Customer Service?\n          </h2>\n          <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join thousands of businesses already using AI to provide better customer experiences. \n            Set up your AI receptionist in minutes, not weeks.\n          </p>\n          <Button size=\"lg\" onClick={handleLogin} data-testid=\"button-cta\">\n            Start Your Free Trial Today\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-8\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Bot className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <div>\n                <h3 className=\"font-bold text-foreground\">AI Receptionist</h3>\n                <p className=\"text-xs text-muted-foreground\">Business Automation Platform</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              © 2025 AI Receptionist. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":14044},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/chat/chat-widget-preview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Bot, Code, User, Send } from \"lucide-react\";\n\nexport default function ChatWidgetPreview() {\n  return (\n    <Card className=\"fade-in\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Website Chat Widget Preview</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-embed-code\">\n            <Code className=\"h-4 w-4 mr-2\" />\n            Get Embed Code\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Chat Widget Mockup */}\n        <div className=\"bg-muted/30 rounded-lg p-4 h-80 relative\">\n          {/* Simulated website background */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-muted to-muted/50 rounded-lg\"></div>\n          \n          {/* Chat Widget */}\n          <div className=\"absolute bottom-4 right-4 w-80 bg-card border border-border rounded-lg shadow-lg\">\n            {/* Widget Header */}\n            <div className=\"bg-primary text-primary-foreground px-4 py-3 rounded-t-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-primary-foreground/20 rounded-full flex items-center justify-center mr-3\">\n                    <Bot className=\"h-4 w-4 text-primary-foreground\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-sm\" data-testid=\"text-preview-title\">\n                      AI Assistant\n                    </h4>\n                    <p className=\"text-xs opacity-90\">Online now</p>\n                  </div>\n                </div>\n                <button className=\"text-primary-foreground/80 hover:text-primary-foreground\">\n                  <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                  </svg>\n                </button>\n              </div>\n            </div>\n            \n            {/* Chat Messages */}\n            <div className=\"p-4 h-64 overflow-y-auto bg-background\">\n              <div className=\"space-y-3\">\n                {/* Bot Message */}\n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                    <Bot className=\"h-3 w-3 text-primary-foreground\" />\n                  </div>\n                  <div className=\"bg-muted p-3 rounded-lg max-w-xs\">\n                    <p className=\"text-sm text-foreground\" data-testid=\"text-preview-welcome\">\n                      Hello! I'm your AI assistant. How can I help you today?\n                    </p>\n                  </div>\n                </div>\n                \n                {/* User Message */}\n                <div className=\"flex justify-end\">\n                  <div className=\"bg-primary p-3 rounded-lg max-w-xs\">\n                    <p className=\"text-sm text-primary-foreground\">\n                      I'd like to book an appointment\n                    </p>\n                  </div>\n                </div>\n                \n                {/* Bot Response */}\n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                    <Bot className=\"h-3 w-3 text-primary-foreground\" />\n                  </div>\n                  <div className=\"bg-muted p-3 rounded-lg max-w-xs\">\n                    <p className=\"text-sm text-foreground\">\n                      I'd be happy to help you book an appointment! What type of service are you looking for?\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Input Area */}\n            <div className=\"p-4 border-t border-border\">\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  placeholder=\"Type your message...\"\n                  className=\"flex-1 text-sm\"\n                  readOnly\n                  data-testid=\"input-preview-message\"\n                />\n                <Button size=\"sm\" data-testid=\"button-preview-send\">\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Widget Features */}\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 border border-border rounded-lg\">\n            <Bot className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n            <h4 className=\"font-medium text-foreground\">AI-Powered</h4>\n            <p className=\"text-sm text-muted-foreground\">Smart responses using GPT-5</p>\n          </div>\n          \n          <div className=\"text-center p-4 border border-border rounded-lg\">\n            <User className=\"h-8 w-8 text-chart-2 mx-auto mb-2\" />\n            <h4 className=\"font-medium text-foreground\">24/7 Available</h4>\n            <p className=\"text-sm text-muted-foreground\">Always ready to help customers</p>\n          </div>\n          \n          <div className=\"text-center p-4 border border-border rounded-lg\">\n            <Code className=\"h-8 w-8 text-chart-4 mx-auto mb-2\" />\n            <h4 className=\"font-medium text-foreground\">Easy Integration</h4>\n            <p className=\"text-sm text-muted-foreground\">One-line embed code</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5935},"client/src/components/chat/chat-widget.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Bot, User, X, Send } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: 'customer' | 'ai' | 'agent';\n  timestamp: Date;\n}\n\ninterface ChatWidgetProps {\n  businessId: string;\n  businessName?: string;\n  position?: 'bottom-right' | 'bottom-left';\n  theme?: {\n    primaryColor?: string;\n    backgroundColor?: string;\n    textColor?: string;\n  };\n}\n\nexport default function ChatWidget({ \n  businessId, \n  businessName = \"AI Assistant\",\n  position = 'bottom-right',\n  theme = {}\n}: ChatWidgetProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [conversationId, setConversationId] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const startConversation = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/conversations/start\", {\n        businessId,\n        channel: \"website\",\n        customerIdentifier: `web-${Date.now()}`,\n      });\n      const conversation = await response.json();\n      setConversationId(conversation.id);\n      \n      // Add welcome message\n      setMessages([{\n        id: \"welcome\",\n        content: `Hello! I'm ${businessName} AI assistant. How can I help you today?`,\n        sender: \"ai\",\n        timestamp: new Date(),\n      }]);\n    } catch (error) {\n      console.error(\"Failed to start conversation:\", error);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!inputValue.trim() || !conversationId) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputValue,\n      sender: \"customer\",\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/chat\", {\n        message: inputValue,\n        conversationId,\n        channel: \"website\",\n        customerIdentifier: `web-${Date.now()}`,\n      });\n      \n      const aiResponse = await response.json();\n      \n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: aiResponse.message,\n        sender: \"ai\",\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: \"I'm sorry, I'm experiencing some technical difficulties. Please try again.\",\n        sender: \"ai\",\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const handleOpen = () => {\n    setIsOpen(true);\n    if (!conversationId) {\n      startConversation();\n    }\n  };\n\n  const positionClasses = position === 'bottom-right' \n    ? 'bottom-4 right-4' \n    : 'bottom-4 left-4';\n\n  return (\n    <div className={`fixed ${positionClasses} z-50`}>\n      {!isOpen ? (\n        <Button\n          onClick={handleOpen}\n          className=\"w-14 h-14 rounded-full shadow-lg\"\n          style={{ backgroundColor: theme.primaryColor }}\n          data-testid=\"button-open-chat\"\n        >\n          <Bot className=\"h-6 w-6\" />\n        </Button>\n      ) : (\n        <Card className=\"w-80 h-96 shadow-xl\">\n          {/* Header */}\n          <CardHeader \n            className=\"text-primary-foreground px-4 py-3 rounded-t-lg\"\n            style={{ backgroundColor: theme.primaryColor || 'hsl(var(--primary))' }}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-primary-foreground/20 rounded-full flex items-center justify-center mr-3\">\n                  <Bot className=\"h-4 w-4 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-sm\" data-testid=\"text-chat-title\">{businessName}</h4>\n                  <p className=\"text-xs opacity-90\">Online now</p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"text-primary-foreground/80 hover:text-primary-foreground h-auto p-1\"\n                data-testid=\"button-close-chat\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n\n          {/* Messages */}\n          <CardContent className=\"p-0 h-64 overflow-y-auto bg-background\">\n            <div className=\"p-4 space-y-3\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.sender === 'customer' ? 'justify-end' : 'items-start'}`}\n                >\n                  {message.sender === 'ai' && (\n                    <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                      <Bot className=\"h-3 w-3 text-primary-foreground\" />\n                    </div>\n                  )}\n                  <div\n                    className={`p-3 rounded-lg max-w-xs ${\n                      message.sender === 'customer'\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted text-foreground'\n                    }`}\n                  >\n                    <p className=\"text-sm\" data-testid={`message-${message.id}`}>\n                      {message.content}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              {isLoading && (\n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                    <Bot className=\"h-3 w-3 text-primary-foreground\" />\n                  </div>\n                  <div className=\"bg-muted p-3 rounded-lg\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n          </CardContent>\n\n          {/* Input */}\n          <div className=\"p-4 border-t border-border\">\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                placeholder=\"Type your message...\"\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={handleKeyPress}\n                className=\"flex-1 text-sm\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                onClick={sendMessage}\n                disabled={!inputValue.trim() || isLoading}\n                size=\"sm\"\n                style={{ backgroundColor: theme.primaryColor }}\n                data-testid=\"button-send-message\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8221},"client/src/components/dashboard/channels-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Smartphone, Globe, Facebook, Instagram } from \"lucide-react\";\n\ninterface Channel {\n  id: string;\n  name: string;\n  type: string;\n  isActive: boolean;\n}\n\nexport default function ChannelsOverview() {\n  const { data: channels, isLoading } = useQuery<Channel[]>({\n    queryKey: [\"/api/channels\"],\n  });\n\n  const getChannelIcon = (type: string) => {\n    switch (type) {\n      case 'whatsapp':\n        return <Smartphone className=\"h-6 w-6 text-green-500\" />;\n      case 'website':\n        return <Globe className=\"h-6 w-6 text-purple-600\" />;\n      case 'facebook':\n        return <Facebook className=\"h-6 w-6 text-blue-600\" />;\n      case 'instagram':\n        return <Instagram className=\"h-6 w-6 text-pink-500\" />;\n      case 'telegram':\n        return <Smartphone className=\"h-6 w-6 text-blue-500\" />;\n      default:\n        return <Globe className=\"h-6 w-6 text-gray-500\" />;\n    }\n  };\n\n  // Fetch real channel statistics\n  const { data: channelStats } = useQuery<Record<string, number>>({\n    queryKey: [\"/api/channels/stats\"],\n  });\n\n  const getChannelStats = (type: string) => {\n    return channelStats?.[type] || 0;\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"fade-in\">\n        <CardHeader>\n          <CardTitle>Connected Channels</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-16 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const defaultChannels = [\n    { type: 'whatsapp', name: 'WhatsApp Business', isActive: true },\n    { type: 'facebook', name: 'Facebook Messenger', isActive: true },\n    { type: 'website', name: 'Website Widget', isActive: true },\n    { type: 'instagram', name: 'Instagram DM', isActive: false },\n    { type: 'telegram', name: 'Telegram Bot', isActive: true },\n  ];\n\n  const channelsToShow = (channels && channels.length > 0) ? channels : defaultChannels;\n\n  return (\n    <Card className=\"fade-in\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Connected Channels</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-manage-channels\">\n            Manage All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {channelsToShow.map((channel: Channel | any, index: number) => {\n            const conversations = getChannelStats(channel.type);\n            const isActive = channel.isActive !== false;\n            \n            return (\n              <div \n                key={channel.id || index} \n                className={`flex items-center justify-between p-3 bg-muted/50 rounded-lg ${!isActive ? 'opacity-60' : ''}`}\n              >\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 rounded-lg flex items-center justify-center bg-background\">\n                    {getChannelIcon(channel.type)}\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"font-medium text-foreground\" data-testid={`channel-name-${channel.type}`}>\n                      {channel.name}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {isActive ? `${conversations} conversations today` : 'Setup required'}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center\">\n                  {isActive ? (\n                    <>\n                      <span className=\"w-2 h-2 bg-chart-2 rounded-full channel-indicator mr-2\"></span>\n                      <span className=\"text-sm text-muted-foreground\">Active</span>\n                    </>\n                  ) : (\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-connect-${channel.type}`}>\n                      Connect\n                    </Button>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4398},"client/src/components/dashboard/live-conversations.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare } from \"lucide-react\";\n\nexport default function LiveConversations() {\n  const { data: activeConversations, isLoading } = useQuery({\n    queryKey: [\"/api/conversations/active\"],\n  });\n\n  // Mock conversations for demo\n  const mockConversations = [\n    {\n      id: \"1\",\n      customerInitial: \"A\",\n      customerName: \"Alice Thompson\",\n      channel: \"WhatsApp\",\n      channelColor: \"bg-green-500/10 text-green-700\",\n      lastMessage: \"Looking to schedule a consultation for next week...\",\n      duration: \"3m 42s\",\n      bgColor: \"bg-chart-1\",\n    },\n    {\n      id: \"2\",\n      customerInitial: \"R\", \n      customerName: \"Robert Kim\",\n      channel: \"Website\",\n      channelColor: \"bg-purple-500/10 text-purple-700\",\n      lastMessage: \"What are your emergency hours?\",\n      duration: \"1m 15s\",\n      bgColor: \"bg-chart-3\",\n    },\n    {\n      id: \"3\",\n      customerInitial: \"M\",\n      customerName: \"Maria Santos\", \n      channel: \"Messenger\",\n      channelColor: \"bg-blue-500/10 text-blue-700\",\n      lastMessage: \"Can I reschedule my appointment?\",\n      duration: \"7m 23s\",\n      bgColor: \"bg-chart-5\",\n    },\n  ];\n\n  const conversations = activeConversations?.slice(0, 3) || mockConversations;\n\n  if (isLoading) {\n    return (\n      <Card className=\"fade-in\">\n        <CardHeader>\n          <CardTitle>Live Conversations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"fade-in\">\n      <CardHeader className=\"border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Live Conversations</CardTitle>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center\">\n              <span className=\"w-2 h-2 bg-chart-2 rounded-full mr-2 channel-indicator\"></span>\n              <span className=\"text-sm text-muted-foreground\">{conversations.length} active</span>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-conversations\">\n              View All\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {conversations.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No active conversations</h3>\n            <p className=\"text-muted-foreground\">Active conversations will appear here in real-time</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {conversations.map((conversation: any, index: number) => (\n              <div \n                key={conversation.id || index} \n                className=\"border border-border rounded-lg p-4 hover:shadow-md transition-shadow\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center\">\n                    <div className={`w-8 h-8 ${conversation.bgColor || 'bg-primary'} rounded-full flex items-center justify-center mr-3`}>\n                      <span className=\"text-white text-sm font-medium\">\n                        {conversation.customerInitial || conversation.customerId?.[0]?.toUpperCase() || \"?\"}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground text-sm\" data-testid={`conversation-customer-${index}`}>\n                        {conversation.customerName || `Customer ${conversation.customerId?.slice(0, 8)}`}\n                      </p>\n                      <Badge \n                        variant=\"secondary\" \n                        className={conversation.channelColor || \"bg-muted text-muted-foreground\"}\n                      >\n                        {conversation.channel || 'Unknown'}\n                      </Badge>\n                    </div>\n                  </div>\n                  <span className=\"w-2 h-2 bg-chart-2 rounded-full channel-indicator\"></span>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-3\" data-testid={`conversation-message-${index}`}>\n                  {conversation.lastMessage || \"Conversation in progress...\"}\n                </p>\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span className=\"text-muted-foreground\">\n                    {conversation.duration || \"Just started\"}\n                  </span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    className=\"text-primary hover:text-primary/80 font-medium text-xs h-auto p-1\"\n                    data-testid={`button-join-conversation-${index}`}\n                  >\n                    Join Chat\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5552},"client/src/components/dashboard/recent-activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function RecentActivity() {\n  const { data: conversations, isLoading } = useQuery({\n    queryKey: [\"/api/conversations/active\"],\n  });\n\n  // Mock recent activity for demo\n  const mockActivity = [\n    {\n      id: \"1\",\n      customerName: \"Sarah Johnson\",\n      message: \"Booked appointment for dental cleaning\",\n      time: \"2 minutes ago\",\n      channel: \"WhatsApp\",\n      channelColor: \"bg-green-500/10 text-green-700\",\n    },\n    {\n      id: \"2\", \n      customerName: \"Mike Chen\",\n      message: \"Asked about clinic hours and services\",\n      time: \"5 minutes ago\",\n      channel: \"Website\",\n      channelColor: \"bg-purple-500/10 text-purple-700\",\n    },\n    {\n      id: \"3\",\n      customerName: \"Lisa Rodriguez\", \n      message: \"Rescheduled appointment to next Tuesday\",\n      time: \"8 minutes ago\",\n      channel: \"Messenger\",\n      channelColor: \"bg-blue-500/10 text-blue-700\",\n    },\n  ];\n\n  const activityItems = conversations?.slice(0, 3) || mockActivity;\n\n  if (isLoading) {\n    return (\n      <Card className=\"fade-in\">\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"fade-in\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Activity</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-activity\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {activityItems.map((activity: any, index: number) => (\n            <div \n              key={activity.id || index} \n              className=\"flex items-start space-x-3 p-3 hover:bg-muted/50 rounded-lg transition-colors\"\n            >\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                <User className=\"h-4 w-4 text-primary-foreground\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-foreground\" data-testid={`activity-customer-${index}`}>\n                  {activity.customerName || `Customer ${activity.id?.slice(0, 8)}`}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {activity.message || \"Started a new conversation\"}\n                </p>\n                <div className=\"flex items-center mt-1\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {activity.time || (activity.lastMessageAt ? \n                      format(new Date(activity.lastMessageAt), 'PPp') : \n                      'Just now'\n                    )}\n                  </span>\n                  <span className=\"mx-2 text-muted-foreground\">•</span>\n                  <Badge \n                    variant=\"secondary\" \n                    className={activity.channelColor || \"bg-muted text-muted-foreground\"}\n                  >\n                    {activity.channel || activity.channel || 'Unknown'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3772},"client/src/components/dashboard/stats-grid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MessageSquare, CalendarCheck, Clock, Smile } from \"lucide-react\";\n\ninterface StatsData {\n  totalConversations: number;\n  bookingsMade: number;\n  avgResponseTime: string;\n  satisfactionRate: string;\n}\n\nexport default function StatsGrid() {\n  const { data: stats, isLoading } = useQuery<StatsData>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const statsData = [\n    {\n      title: \"Total Conversations\",\n      value: (stats?.totalConversations ?? 0).toLocaleString(),\n      change: \"+12%\",\n      changeText: \"from last month\",\n      icon: MessageSquare,\n      iconBg: \"bg-primary/10\",\n      iconColor: \"text-primary\",\n    },\n    {\n      title: \"Bookings Made\",\n      value: (stats?.bookingsMade ?? 0).toLocaleString(),\n      change: \"+8%\",\n      changeText: \"from last week\",\n      icon: CalendarCheck,\n      iconBg: \"bg-chart-2/10\",\n      iconColor: \"text-chart-2\",\n    },\n    {\n      title: \"Avg Response Time\",\n      value: stats?.avgResponseTime ?? \"0.0s\",\n      change: \"-15%\",\n      changeText: \"improvement\",\n      icon: Clock,\n      iconBg: \"bg-chart-4/10\",\n      iconColor: \"text-chart-4\",\n    },\n    {\n      title: \"Satisfaction Rate\",\n      value: stats?.satisfactionRate ?? \"0%\",\n      change: \"+2%\",\n      changeText: \"from last month\",\n      icon: Smile,\n      iconBg: \"bg-chart-1/10\",\n      iconColor: \"text-chart-1\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-20 bg-muted rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statsData.map((stat) => (\n        <Card key={stat.title} className=\"stats-card fade-in\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className={`p-2 rounded-lg ${stat.iconBg}`}>\n                <stat.icon className={`h-5 w-5 ${stat.iconColor}`} />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">{stat.title}</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {stat.value}\n                </p>\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center text-sm\">\n              <span className=\"text-chart-2 font-medium\">{stat.change}</span>\n              <span className=\"text-muted-foreground ml-2\">{stat.changeText}</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2929},"client/src/components/layout/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Bell, Moon, Plus, Menu, Sun } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n  onMenuToggle?: () => void;\n}\n\nexport default function Header({ title, subtitle, onMenuToggle }: HeaderProps) {\n  const { isAuthenticated } = useAuth();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  \n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    const saved = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const shouldBeDark = saved === 'dark' || (!saved && prefersDark);\n    \n    setIsDarkMode(shouldBeDark);\n    if (shouldBeDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n  \n  const toggleTheme = () => {\n    const newDarkMode = !isDarkMode;\n    setIsDarkMode(newDarkMode);\n    \n    if (newDarkMode) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  };\n  \n  // Fetch pending reminders and notifications\n  const { data: conversations } = useQuery({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n  \n  const { data: bookings } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n  });\n  \n  // Calculate notification count - simplified for now\n  // For now, notifications = 0 until we have proper notification system\n  const totalNotifications = 0;\n  return (\n    <header className=\"bg-card border-b border-border px-4 md:px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        {/* Mobile menu button */}\n        {onMenuToggle && (\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"md:hidden mr-2\" \n            onClick={onMenuToggle}\n            data-testid=\"button-mobile-menu\"\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n        )}\n        <div className=\"flex-1 min-w-0\">\n          <h2 className=\"text-xl md:text-2xl font-semibold text-foreground truncate\" data-testid=\"text-header-title\">{title}</h2>\n          <p className=\"text-sm text-muted-foreground truncate\" data-testid=\"text-header-subtitle\">{subtitle}</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-2 md:space-x-4\">\n          {/* Notification Bell */}\n          <Link href=\"/notifications\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n              <Bell className=\"h-5 w-5\" />\n              {totalNotifications > 0 && (\n                <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n                  {totalNotifications > 99 ? '99+' : totalNotifications}\n                </span>\n              )}\n            </Button>\n          </Link>\n          \n          {/* Theme Toggle */}\n          <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme} data-testid=\"button-theme-toggle\">\n            {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n          </Button>\n\n          {/* Quick Actions */}\n          <Button size=\"sm\" className=\"hidden sm:flex\" data-testid=\"button-quick-action\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Channel\n          </Button>\n          <Button size=\"sm\" className=\"sm:hidden\" data-testid=\"button-quick-action-mobile\">\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3940},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Bot, \n  BarChart3, \n  Bell,\n  MessageSquare, \n  Plug, \n  Calendar, \n  Users, \n  Brain,\n  CreditCard,\n  Settings,\n  ChevronDown,\n  Menu,\n  X,\n  CheckCircle\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface NavigationItem {\n  title: string;\n  href: string;\n  icon: any;\n  badge?: number;\n  badgeVariant?: \"default\" | \"secondary\";\n}\n\nconst getNavigationItems = (unreadConversations: number, pendingBookings: number): NavigationItem[] => [\n  {\n    title: \"Dashboard\",\n    href: \"/\",\n    icon: BarChart3,\n  },\n  {\n    title: \"Conversations\",\n    href: \"/conversations\",\n    icon: MessageSquare,\n    badge: unreadConversations > 0 ? unreadConversations : undefined,\n  },\n  {\n    title: \"Channels\",\n    href: \"/channels\",\n    icon: Plug,\n  },\n  {\n    title: \"Bookings\",\n    href: \"/bookings\",\n    icon: Calendar,\n    badge: Math.min(pendingBookings, 99) > 0 ? Math.min(pendingBookings, 99) : undefined,\n    badgeVariant: \"secondary\" as const,\n  },\n  {\n    title: \"Customers\",\n    href: \"/customers\",\n    icon: Users,\n  },\n  {\n    title: \"Analytics\",\n    href: \"/analytics\",\n    icon: BarChart3,\n  },\n  {\n    title: \"AI Settings\",\n    href: \"/ai-settings\",\n    icon: Brain,\n  },\n  {\n    title: \"Reminders\",\n    href: \"/reminder-settings\",\n    icon: Bell,\n  },\n  {\n    title: \"Schedule\",\n    href: \"/schedule-settings\",\n    icon: Calendar,\n  },\n  {\n    title: \"Approvals\",\n    href: \"/booking-approval\",\n    icon: CheckCircle,\n    badge: Math.min(pendingBookings, 99) > 0 ? Math.min(pendingBookings, 99) : undefined,\n    badgeVariant: \"secondary\" as const,\n  },\n];\n\nconst accountItems = [\n  {\n    title: \"Billing\",\n    href: \"/billing\",\n    icon: CreditCard,\n  },\n  {\n    title: \"Settings\",\n    href: \"/settings\",\n    icon: Settings,\n  },\n];\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onToggle: () => void;\n}\n\nexport default function Sidebar({ isOpen, onToggle }: SidebarProps) {\n  const [location] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  \n  // Fetch conversation and booking counts\n  const { data: conversations } = useQuery({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n  \n  const { data: bookings } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n  });\n  \n  // Calculate dynamic counts\n  // For now, show 0 for conversations until we implement proper read/unread tracking\n  const unreadConversations = 0;\n  \n  // Only count truly pending bookings\n  const pendingBookings = Array.isArray(bookings) ? bookings.filter((b: any) => {\n    return b.status === 'pending';\n  }).length : 0;\n  \n  const navigationItems = getNavigationItems(unreadConversations, pendingBookings);\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 z-40 bg-black bg-opacity-50 md:hidden\" \n          onClick={onToggle}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <aside className={cn(\n        \"fixed md:static inset-y-0 left-0 z-50 w-64 bg-card border-r border-border transition-transform duration-300 ease-in-out md:translate-x-0\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n      <div className=\"flex flex-col h-full\">\n        {/* Logo/Brand */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Bot className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\">AI Receptionist</h1>\n              <p className=\"text-xs text-muted-foreground\">Business Automation</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 p-4\">\n          <ul className=\"space-y-2\">\n            {navigationItems.map((item: NavigationItem) => {\n              const isActive = location === item.href;\n              return (\n                <li key={item.href}>\n                  <Link href={item.href}>\n                    <span \n                      className={cn(\n                        \"flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer\",\n                        isActive \n                          ? \"bg-accent text-accent-foreground\" \n                          : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                      )}\n                      data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <item.icon className=\"mr-3 h-4 w-4\" />\n                      {item.title}\n                      {item.badge && (\n                        <Badge \n                          variant={item.badgeVariant || \"default\"} \n                          className=\"ml-auto text-xs px-2 py-1\"\n                        >\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n\n          <div className=\"mt-8\">\n            <h4 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wide mb-2\">\n              Account\n            </h4>\n            <ul className=\"space-y-2\">\n              {accountItems.map((item) => {\n                const isActive = location === item.href;\n                return (\n                  <li key={item.href}>\n                    <Link href={item.href}>\n                      <span \n                        className={cn(\n                          \"flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer\",\n                          isActive \n                            ? \"bg-accent text-accent-foreground\" \n                            : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                        )}\n                        data-testid={`nav-${item.title.toLowerCase()}`}\n                      >\n                        <item.icon className=\"mr-3 h-4 w-4\" />\n                        {item.title}\n                      </span>\n                    </Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\">\n                {(user as any)?.businessName?.[0] || (user as any)?.firstName?.[0] || \"U\"}\n              </span>\n            </div>\n            <div className=\"ml-3 flex-1\">\n              <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-business-name\">\n                {(user as any)?.businessName || `${(user as any)?.firstName || \"User\"}'s Business`}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {(user as any)?.subscriptionStatus === 'active' ? 'Pro Plan' : 'Free Trial'}\n              </p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-0 h-auto\">\n              <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </aside>\n    </>\n  );\n}\n","size_bytes":7742},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/ai-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Settings, Globe, Brain, MessageSquare, Plus, Save, RefreshCw } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertAiTrainingSchema } from \"@shared/schema\";\n\nconst languageFormSchema = z.object({\n  preferredLanguage: z.string(),\n  aiPromptCustomization: z.string().optional(),\n  aiLanguageInstructions: z.string().optional(),\n});\n\nconst aiTrainingFormSchema = insertAiTrainingSchema.extend({\n  content: z.string().min(1, \"Content is required\"),\n  category: z.string().min(1, \"Category is required\"),\n});\n\nexport default function AISettings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isTrainingDialogOpen, setIsTrainingDialogOpen] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch current user settings\n  const { data: userSettings, isLoading: isLoadingSettings } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Fetch AI training data\n  const { data: aiTrainingData, isLoading: isLoadingTraining } = useQuery({\n    queryKey: [\"/api/ai-training\"],\n    retry: false,\n  });\n\n  // Language and prompt form\n  const languageForm = useForm<z.infer<typeof languageFormSchema>>({\n    resolver: zodResolver(languageFormSchema),\n    defaultValues: {\n      preferredLanguage: userSettings?.preferredLanguage || \"en\",\n      aiPromptCustomization: userSettings?.aiPromptCustomization || \"\",\n      aiLanguageInstructions: userSettings?.aiLanguageInstructions || \"\",\n    },\n  });\n\n  // AI training form\n  const trainingForm = useForm<z.infer<typeof aiTrainingFormSchema>>({\n    resolver: zodResolver(aiTrainingFormSchema),\n    defaultValues: {\n      content: \"\",\n      category: \"\",\n    },\n  });\n\n  // Update form values when user data loads\n  useEffect(() => {\n    if (userSettings) {\n      languageForm.reset({\n        preferredLanguage: userSettings.preferredLanguage || \"en\",\n        aiPromptCustomization: userSettings.aiPromptCustomization || \"\",\n        aiLanguageInstructions: userSettings.aiLanguageInstructions || \"\",\n      });\n    }\n  }, [userSettings, languageForm]);\n\n  // Save language settings mutation\n  const saveLanguageSettingsMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof languageFormSchema>) => {\n      await apiRequest(\"PUT\", \"/api/ai-settings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Saved\",\n        description: \"Your AI and language preferences have been updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings: \" + error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create AI training mutation\n  const createTrainingMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof aiTrainingFormSchema>) => {\n      await apiRequest(\"POST\", \"/api/ai-training\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Training Data Added\",\n        description: \"Your AI training data has been saved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-training\"] });\n      trainingForm.reset();\n      setIsTrainingDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save training data: \" + error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLanguageSubmit = (data: z.infer<typeof languageFormSchema>) => {\n    saveLanguageSettingsMutation.mutate(data);\n  };\n\n  const onTrainingSubmit = (data: z.infer<typeof aiTrainingFormSchema>) => {\n    createTrainingMutation.mutate(data);\n  };\n\n  const languages = [\n    { value: \"en\", label: \"English\", flag: \"🇺🇸\" },\n    { value: \"az\", label: \"Azərbaycan dili\", flag: \"🇦🇿\" },\n    { value: \"ru\", label: \"Русский\", flag: \"🇷🇺\" },\n    { value: \"tr\", label: \"Türkçe\", flag: \"🇹🇷\" },\n    { value: \"es\", label: \"Español\", flag: \"🇪🇸\" },\n    { value: \"fr\", label: \"Français\", flag: \"🇫🇷\" },\n    { value: \"de\", label: \"Deutsch\", flag: \"🇩🇪\" },\n    { value: \"pt\", label: \"Português\", flag: \"🇵🇹\" },\n    { value: \"ar\", label: \"العربية\", flag: \"🇸🇦\" },\n  ];\n\n  const categoryOptions = [\n    { value: \"faq\", label: \"FAQs\" },\n    { value: \"services\", label: \"Services\" },\n    { value: \"policies\", label: \"Policies\" },\n    { value: \"hours\", label: \"Business Hours\" },\n    { value: \"pricing\", label: \"Pricing\" },\n    { value: \"contact\", label: \"Contact Information\" },\n    { value: \"booking\", label: \"Booking Instructions\" },\n    { value: \"general\", label: \"General Information\" },\n  ];\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\"/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden md:ml-0\">\n        <Header \n          title=\"AI Settings\" \n          subtitle=\"Configure your AI receptionist's language, behavior, and training data\" \n          onMenuToggle={() => setSidebarOpen(!sidebarOpen)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"container mx-auto p-4 md:p-6 max-w-4xl\">\n        <div className=\"mb-6 md:mb-8\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <Settings className=\"h-6 w-6 md:h-8 md:w-8 text-primary\" />\n            <h1 className=\"text-2xl md:text-3xl font-bold\">AI Settings</h1>\n          </div>\n          <p className=\"text-muted-foreground text-sm md:text-base\">\n            Configure your AI receptionist's language, behavior, and training data\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"language\" className=\"space-y-4 md:space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 h-auto p-1\">\n            <TabsTrigger value=\"language\" className=\"flex items-center space-x-1 md:space-x-2 text-xs md:text-sm py-2 px-2\">\n              <Globe className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Language & Prompts</span>\n              <span className=\"sm:hidden\">Language</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"training\" className=\"flex items-center space-x-1 md:space-x-2 text-xs md:text-sm py-2 px-2\">\n              <Brain className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Training Data</span>\n              <span className=\"sm:hidden\">Training</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"preview\" className=\"flex items-center space-x-1 md:space-x-2 text-xs md:text-sm py-2 px-2\">\n              <MessageSquare className=\"h-4 w-4\" />\n              <span>Preview</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Language & Prompts Tab */}\n          <TabsContent value=\"language\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Globe className=\"h-5 w-5\" />\n                  <span>Language & AI Behavior Settings</span>\n                </CardTitle>\n                <CardDescription>\n                  Set your preferred language and customize how your AI receptionist responds\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...languageForm}>\n                  <form onSubmit={languageForm.handleSubmit(onLanguageSubmit)} className=\"space-y-6\">\n                    <FormField\n                      control={languageForm.control}\n                      name=\"preferredLanguage\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Primary Language</FormLabel>\n                          <Select value={field.value} onValueChange={field.onChange}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-language\">\n                                <SelectValue placeholder=\"Select your primary language\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {languages.map((lang) => (\n                                <SelectItem key={lang.value} value={lang.value}>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <span>{lang.flag}</span>\n                                    <span>{lang.label}</span>\n                                  </div>\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormDescription>\n                            Your AI will primarily respond in this language\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={languageForm.control}\n                      name=\"aiPromptCustomization\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Custom AI Prompt (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              {...field}\n                              data-testid=\"textarea-custom-prompt\"\n                              placeholder=\"Add custom instructions for your AI receptionist's behavior...\"\n                              className=\"min-h-[120px]\"\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Customize how your AI behaves. This will be added to the base prompt.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={languageForm.control}\n                      name=\"aiLanguageInstructions\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Language-Specific Instructions (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              {...field}\n                              data-testid=\"textarea-language-instructions\"\n                              placeholder=\"Add specific instructions for how to respond in your chosen language...\"\n                              className=\"min-h-[100px]\"\n                            />\n                          </FormControl>\n                          <FormDescription>\n                            Special instructions for cultural context, formality level, or language-specific behaviors\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      data-testid=\"button-save-language-settings\"\n                      disabled={saveLanguageSettingsMutation.isPending}\n                      className=\"w-full\"\n                    >\n                      {saveLanguageSettingsMutation.isPending ? (\n                        <>\n                          <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Saving...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          Save Language Settings\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Training Data Tab */}\n          <TabsContent value=\"training\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Brain className=\"h-5 w-5\" />\n                  <span>AI Training Data</span>\n                </CardTitle>\n                <CardDescription>\n                  Add custom knowledge for your AI receptionist about your business\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Manage your AI's knowledge base with business-specific information\n                    </p>\n                    <Dialog open={isTrainingDialogOpen} onOpenChange={setIsTrainingDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"button-add-training-data\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add Training Data\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add AI Training Data</DialogTitle>\n                          <DialogDescription>\n                            Add information that you want your AI to know about your business\n                          </DialogDescription>\n                        </DialogHeader>\n                        <Form {...trainingForm}>\n                          <form onSubmit={trainingForm.handleSubmit(onTrainingSubmit)} className=\"space-y-4\">\n                            <FormField\n                              control={trainingForm.control}\n                              name=\"category\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Category</FormLabel>\n                                  <Select value={field.value} onValueChange={field.onChange}>\n                                    <FormControl>\n                                      <SelectTrigger data-testid=\"select-training-category\">\n                                        <SelectValue placeholder=\"Select a category\" />\n                                      </SelectTrigger>\n                                    </FormControl>\n                                    <SelectContent>\n                                      {categoryOptions.map((category) => (\n                                        <SelectItem key={category.value} value={category.value}>\n                                          {category.label}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={trainingForm.control}\n                              name=\"content\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Content</FormLabel>\n                                  <FormControl>\n                                    <Textarea\n                                      {...field}\n                                      data-testid=\"textarea-training-content\"\n                                      placeholder=\"Enter the information you want your AI to know...\"\n                                      className=\"min-h-[120px]\"\n                                    />\n                                  </FormControl>\n                                  <FormDescription>\n                                    Be specific and detailed. This information will help your AI provide better responses.\n                                  </FormDescription>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <DialogFooter>\n                              <Button \n                                type=\"submit\" \n                                data-testid=\"button-save-training-data\"\n                                disabled={createTrainingMutation.isPending}\n                              >\n                                {createTrainingMutation.isPending ? (\n                                  <>\n                                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                                    Saving...\n                                  </>\n                                ) : (\n                                  \"Save Training Data\"\n                                )}\n                              </Button>\n                            </DialogFooter>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n\n                  {isLoadingTraining ? (\n                    <div className=\"flex items-center justify-center py-8\">\n                      <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n                    </div>\n                  ) : (\n                    <div className=\"grid gap-4\">\n                      {aiTrainingData?.length > 0 ? (\n                        aiTrainingData.map((training: any) => (\n                          <Card key={training.id} className=\"p-4\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"space-y-2 flex-1\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Badge variant=\"secondary\" data-testid={`badge-category-${training.id}`}>\n                                    {categoryOptions.find(c => c.value === training.category)?.label || training.category}\n                                  </Badge>\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {new Date(training.createdAt).toLocaleDateString()}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm\" data-testid={`text-training-content-${training.id}`}>\n                                  {training.content}\n                                </p>\n                              </div>\n                            </div>\n                          </Card>\n                        ))\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <Brain className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                          <p className=\"text-muted-foreground\">No training data added yet</p>\n                          <p className=\"text-sm text-muted-foreground\">Add information about your business to improve AI responses</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Preview Tab */}\n          <TabsContent value=\"preview\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageSquare className=\"h-5 w-5\" />\n                  <span>AI Response Preview</span>\n                </CardTitle>\n                <CardDescription>\n                  See how your AI will respond with current settings\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Current Settings Summary:</p>\n                    <div className=\"space-y-1 text-sm\">\n                      <p><strong>Language:</strong> {languages.find(l => l.value === userSettings?.preferredLanguage)?.label || \"English\"}</p>\n                      <p><strong>Custom Prompt:</strong> {userSettings?.aiPromptCustomization ? \"✓ Configured\" : \"Default\"}</p>\n                      <p><strong>Language Instructions:</strong> {userSettings?.aiLanguageInstructions ? \"✓ Configured\" : \"Default\"}</p>\n                      <p><strong>Training Data:</strong> {aiTrainingData?.length || 0} entries</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-background border rounded-lg p-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">Sample AI Response:</p>\n                    <div className=\"bg-primary/10 p-3 rounded border-l-4 border-primary\">\n                      <p className=\"text-sm\">\n                        {userSettings?.preferredLanguage === 'az' && (\n                          \"Salam! Mən sizin AI köməkçinizəm. Sizə necə kömək edə bilərəm?\"\n                        )}\n                        {userSettings?.preferredLanguage === 'ru' && (\n                          \"Здравствуйте! Я ваш AI-помощник. Как я могу вам помочь?\"\n                        )}\n                        {(!userSettings?.preferredLanguage || userSettings?.preferredLanguage === 'en') && (\n                          \"Hello! I'm your AI receptionist. How can I help you today?\"\n                        )}\n                        {userSettings?.preferredLanguage && !['en', 'az', 'ru'].includes(userSettings.preferredLanguage) && (\n                          \"Hello! I'm your AI receptionist. How can I help you today?\"\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":24199},"client/src/pages/analytics.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  BarChart3, \n  TrendingUp, \n  MessageSquare, \n  Calendar, \n  Users, \n  Clock,\n  Star,\n  Activity\n} from \"lucide-react\";\nimport { format, subDays, startOfDay, endOfDay } from \"date-fns\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [dateRange, setDateRange] = useState(\"7d\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats } = useQuery<any>({\n    queryKey: [\"/api/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: conversations } = useQuery<any[]>({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: bookings } = useQuery<any[]>({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Calculate analytics data\n  const totalConversations = conversations?.length || 0;\n  const totalBookings = bookings?.length || 0;\n  const confirmedBookings = bookings?.filter((b: any) => b.status === 'confirmed').length || 0;\n  const conversionRate = totalConversations > 0 ? (confirmedBookings / totalConversations * 100).toFixed(1) : \"0\";\n\n  // Recent performance data\n  const last7Days = Array.from({ length: 7 }, (_, i) => {\n    const date = subDays(new Date(), i);\n    const dayConversations = conversations?.filter((c: any) => {\n      const convDate = new Date(c.createdAt);\n      return convDate >= startOfDay(date) && convDate <= endOfDay(date);\n    }).length || 0;\n    \n    return {\n      date: format(date, 'MMM dd'),\n      conversations: dayConversations,\n    };\n  }).reverse();\n\n  const analyticsCards = [\n    {\n      title: \"Total Conversations\",\n      value: totalConversations.toLocaleString(),\n      change: \"+12%\",\n      changeText: \"vs last week\",\n      icon: MessageSquare,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100\",\n    },\n    {\n      title: \"Bookings Created\",\n      value: totalBookings.toLocaleString(),\n      change: \"+8%\",\n      changeText: \"vs last week\", \n      icon: Calendar,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100\",\n    },\n    {\n      title: \"Conversion Rate\",\n      value: `${conversionRate}%`,\n      change: \"+2.3%\",\n      changeText: \"vs last week\",\n      icon: TrendingUp,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-100\",\n    },\n    {\n      title: \"Avg Response Time\",\n      value: stats?.avgResponseTime || \"2.3s\",\n      change: \"-0.2s\",\n      changeText: \"improvement\",\n      icon: Clock,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-100\",\n    },\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={false} onToggle={() => {}} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Analytics\" \n          subtitle=\"Track your AI receptionist performance and insights\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Time Range Selector */}\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold text-foreground\">Performance Analytics</h1>\n              <div className=\"flex space-x-2\">\n                {[\"7d\", \"30d\", \"90d\"].map((range) => (\n                  <Button\n                    key={range}\n                    variant={dateRange === range ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setDateRange(range)}\n                    data-testid={`button-range-${range}`}\n                  >\n                    {range === \"7d\" ? \"7 Days\" : range === \"30d\" ? \"30 Days\" : \"90 Days\"}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {analyticsCards.map((card) => (\n                <Card key={card.title} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">{card.title}</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid={`metric-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                          {card.value}\n                        </p>\n                        <div className=\"flex items-center mt-2\">\n                          <span className=\"text-sm text-green-600 font-medium\">{card.change}</span>\n                          <span className=\"text-sm text-muted-foreground ml-2\">{card.changeText}</span>\n                        </div>\n                      </div>\n                      <div className={`p-3 rounded-lg ${card.bgColor}`}>\n                        <card.icon className={`h-6 w-6 ${card.color}`} />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Charts and Detailed Analytics */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Conversation Trends */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5\" />\n                    Daily Conversations (Last 7 Days)\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {last7Days.map((day, index) => (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">{day.date}</span>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-32 bg-muted rounded-full h-2\">\n                            <div \n                              className=\"bg-primary h-2 rounded-full\" \n                              style={{ width: `${Math.max(day.conversations / Math.max(...last7Days.map(d => d.conversations)) * 100, 5)}%` }}\n                            />\n                          </div>\n                          <span className=\"text-sm font-medium text-foreground w-8 text-right\">\n                            {day.conversations}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Channel Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Top Performing Channels\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {[\n                      { name: \"Telegram\", conversations: conversations?.filter((c: any) => c.channelType === 'telegram').length || 0, color: \"bg-blue-500\" },\n                      { name: \"Website Widget\", conversations: conversations?.filter((c: any) => c.channelType === 'website').length || 0, color: \"bg-purple-500\" },\n                      { name: \"WhatsApp\", conversations: conversations?.filter((c: any) => c.channelType === 'whatsapp').length || 0, color: \"bg-green-500\" },\n                      { name: \"Facebook\", conversations: conversations?.filter((c: any) => c.channelType === 'facebook').length || 0, color: \"bg-blue-600\" },\n                    ].sort((a, b) => b.conversations - a.conversations).map((channel) => (\n                      <div key={channel.name} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${channel.color}`} />\n                          <span className=\"text-sm text-foreground\">{channel.name}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm font-medium text-foreground\">\n                            {channel.conversations} conversations\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Additional Insights */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"h-5 w-5\" />\n                  Performance Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">{stats?.satisfactionRate || \"94%\"}</div>\n                    <div className=\"text-sm text-muted-foreground\">Customer Satisfaction</div>\n                    <Badge variant=\"outline\" className=\"mt-1\">Excellent</Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">{confirmedBookings}</div>\n                    <div className=\"text-sm text-muted-foreground\">Successful Bookings</div>\n                    <Badge variant=\"outline\" className=\"mt-1\">This Month</Badge>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-foreground\">{stats?.avgResponseTime || \"2.3s\"}</div>\n                    <div className=\"text-sm text-muted-foreground\">Average Response Time</div>\n                    <Badge variant=\"outline\" className=\"mt-1\">Real-time</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":11187},"client/src/pages/conversation-detail.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, useRoute } from \"wouter\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { MessageSquare, User, ArrowLeft, Send } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface Conversation {\n  id: string;\n  customerId: string;\n  channel: string;\n  status: string;\n  userId: string;\n  createdAt: string;\n}\n\ninterface Message {\n  id: string;\n  conversationId: string;\n  content: string;\n  sender: 'customer' | 'ai';\n  createdAt: string;\n}\n\nexport default function ConversationDetail() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [, params] = useRoute(\"/conversations/:id\");\n  const [newMessage, setNewMessage] = useState(\"\");\n  const conversationId = params?.id;\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\", \n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: conversation, isLoading: conversationLoading } = useQuery<Conversation>({\n    queryKey: [`/api/conversations/${conversationId}`],\n    enabled: isAuthenticated && !!conversationId,\n  });\n\n  const { data: messages, isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: [`/api/conversations/${conversationId}/messages`],\n    enabled: isAuthenticated && !!conversationId,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!conversationId) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold\">Conversation not found</h2>\n          <Button onClick={() => setLocation(\"/conversations\")} className=\"mt-4\">\n            Back to Conversations\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={false} onToggle={() => {}} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Conversation Details\"\n          subtitle={`Customer ID: ${conversation?.customerId?.slice(0, 8) || \"Unknown\"}`}\n        />\n        \n        <main className=\"flex-1 flex flex-col overflow-hidden\">\n          {conversationLoading ? (\n            <div className=\"flex items-center justify-center flex-1\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : !conversation ? (\n            <div className=\"flex items-center justify-center flex-1\">\n              <div className=\"text-center\">\n                <MessageSquare className=\"h-12 w-12 text-muted-foreground mb-4 mx-auto\" />\n                <h3 className=\"text-lg font-semibold\">Conversation not found</h3>\n                <p className=\"text-muted-foreground mb-4\">This conversation may have been deleted.</p>\n                <Button onClick={() => setLocation(\"/conversations\")}>\n                  Back to Conversations\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Conversation Info */}\n              <div className=\"p-6 border-b\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <User className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h2 className=\"text-xl font-semibold\" data-testid=\"text-conversation-title\">\n                        Conversation {conversation?.id?.slice(0, 8) || \"Unknown\"}\n                      </h2>\n                      <p className=\"text-muted-foreground\">\n                        Customer: {conversation?.customerId?.slice(0, 8) || \"Unknown\"}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge \n                      variant={conversation?.channel === 'whatsapp' ? 'default' : \n                             conversation?.channel === 'website' ? 'secondary' : 'outline'}\n                    >\n                      <span className=\"capitalize\">{conversation?.channel || 'unknown'}</span>\n                    </Badge>\n                    <Badge variant={conversation?.status === 'active' ? 'default' : 'secondary'}>\n                      {conversation?.status || 'unknown'}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages */}\n              <div className=\"flex-1 flex flex-col overflow-hidden\">\n                <ScrollArea className=\"flex-1 p-6\">\n                  {messagesLoading ? (\n                    <div className=\"flex items-center justify-center py-12\">\n                      <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n                    </div>\n                  ) : !Array.isArray(messages) || messages.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <MessageSquare className=\"h-12 w-12 text-muted-foreground mb-4 mx-auto\" />\n                      <h3 className=\"text-lg font-semibold\">No messages yet</h3>\n                      <p className=\"text-muted-foreground\">Messages will appear here as the conversation progresses.</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {Array.isArray(messages) && messages.map((message: any) => (\n                        <div \n                          key={message.id} \n                          className={`flex ${message.sender === 'customer' ? 'justify-start' : 'justify-end'}`}\n                        >\n                          <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                            message.sender === 'customer' \n                              ? 'bg-muted text-foreground' \n                              : 'bg-primary text-primary-foreground'\n                          }`}>\n                            <p className=\"text-sm\" data-testid={`text-message-${message.id}`}>\n                              {message.content}\n                            </p>\n                            <p className=\"text-xs opacity-70 mt-1\">\n                              {format(new Date(message.createdAt), 'HH:mm')}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n\n                {/* Message Input */}\n                <div className=\"p-6 border-t\">\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Type a message...\"\n                      value={newMessage}\n                      onChange={(e) => setNewMessage(e.target.value)}\n                      onKeyPress={(e) => {\n                        if (e.key === 'Enter') {\n                          // Handle send message\n                          console.log('Send message:', newMessage);\n                          setNewMessage(\"\");\n                        }\n                      }}\n                      data-testid=\"input-new-message\"\n                    />\n                    <Button\n                      onClick={() => {\n                        // Handle send message\n                        console.log('Send message:', newMessage);\n                        setNewMessage(\"\");\n                      }}\n                      disabled={!newMessage.trim()}\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    This is a read-only view. Messages are handled automatically by your AI receptionist.\n                  </p>\n                </div>\n              </div>\n            </>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":9139},"client/src/pages/reminder-settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Bell, Mail, MessageSquare, Phone, Clock, Languages, Save, Plus, X } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\nconst reminderPreferencesSchema = z.object({\n  emailReminders: z.boolean().default(true),\n  smsReminders: z.boolean().default(false),\n  whatsappReminders: z.boolean().default(false),\n  reminderTiming: z.array(z.string()).default(['24h', '1h']),\n  customMessage: z.string().optional(),\n  language: z.enum(['en', 'az', 'ru']).default('en'),\n});\n\ntype ReminderPreferencesFormData = z.infer<typeof reminderPreferencesSchema>;\n\nexport default function ReminderSettings() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [newTiming, setNewTiming] = useState('');\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const form = useForm<ReminderPreferencesFormData>({\n    resolver: zodResolver(reminderPreferencesSchema),\n    defaultValues: {\n      emailReminders: true,\n      smsReminders: false,\n      whatsappReminders: false,\n      reminderTiming: ['24h', '1h'],\n      customMessage: '',\n      language: 'en',\n    },\n  });\n\n  // Fetch current reminder preferences\n  const { data: preferences, isLoading: preferencesLoading } = useQuery({\n    queryKey: ['/api/reminder-preferences'],\n    enabled: isAuthenticated && !isLoading,\n  });\n\n  // Update form when preferences are loaded\n  useEffect(() => {\n    if (preferences && typeof preferences === 'object') {\n      const prefs = preferences as any;\n      form.reset({\n        emailReminders: prefs.emailReminders ?? true,\n        smsReminders: prefs.smsReminders ?? false,\n        whatsappReminders: prefs.whatsappReminders ?? false,\n        reminderTiming: Array.isArray(prefs.reminderTiming) ? prefs.reminderTiming : ['24h', '1h'],\n        customMessage: prefs.customMessage || '',\n        language: prefs.language || 'en',\n      });\n    }\n  }, [preferences, form]);\n\n  // Save preferences mutation\n  const savePreferencesMutation = useMutation({\n    mutationFn: (data: ReminderPreferencesFormData) => \n      apiRequest('POST', '/api/reminder-preferences', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reminder-preferences'] });\n      toast({ \n        title: \"Success\", \n        description: \"Reminder preferences saved successfully!\" \n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to save preferences\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ReminderPreferencesFormData) => {\n    savePreferencesMutation.mutate(data);\n  };\n\n  // Add new reminder timing\n  const addReminderTiming = () => {\n    if (newTiming && !form.getValues().reminderTiming.includes(newTiming)) {\n      const currentTimings = form.getValues().reminderTiming;\n      form.setValue('reminderTiming', [...currentTimings, newTiming]);\n      setNewTiming('');\n    }\n  };\n\n  // Remove reminder timing\n  const removeReminderTiming = (timing: string) => {\n    const currentTimings = form.getValues().reminderTiming;\n    form.setValue('reminderTiming', currentTimings.filter(t => t !== timing));\n  };\n\n  const presetTimings = [\n    { value: '15min', label: '15 minutes before' },\n    { value: '30min', label: '30 minutes before' },\n    { value: '1h', label: '1 hour before' },\n    { value: '2h', label: '2 hours before' },\n    { value: '24h', label: '24 hours before' },\n    { value: '48h', label: '2 days before' },\n    { value: '7d', label: '1 week before' },\n  ];\n\n  const languageOptions = [\n    { value: 'en', label: '🇺🇸 English' },\n    { value: 'az', label: '🇦🇿 Azerbaijani' },\n    { value: 'ru', label: '🇷🇺 Russian' },\n  ];\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Reminder Settings\" \n          subtitle=\"Configure how and when to send appointment reminders\"\n          onMenuToggle={() => setSidebarOpen(true)} \n        />\n        <main className=\"flex-1 overflow-auto p-6\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <Bell className=\"h-8 w-8 text-primary\" />\n              <div>\n                <h1 className=\"text-3xl font-bold\">Reminder Settings</h1>\n                <p className=\"text-muted-foreground\">\n                  Configure how and when you want to send appointment reminders to your customers\n                </p>\n              </div>\n            </div>\n\n            {preferencesLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin w-6 h-6 border-4 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : (\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Notification Types */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <MessageSquare className=\"h-5 w-5\" />\n                        Notification Types\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Choose which communication channels to use for sending reminders\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"emailReminders\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <Mail className=\"h-5 w-5 text-blue-600\" />\n                              <div>\n                                <FormLabel className=\"text-base font-medium\">Email Reminders</FormLabel>\n                                <FormDescription>\n                                  Send appointment reminders via email to customers\n                                </FormDescription>\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-email-reminders\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"smsReminders\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <Phone className=\"h-5 w-5 text-green-600\" />\n                              <div>\n                                <FormLabel className=\"text-base font-medium\">SMS Reminders</FormLabel>\n                                <FormDescription>\n                                  Send appointment reminders via SMS text messages\n                                </FormDescription>\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-sms-reminders\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"whatsappReminders\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center justify-between p-4 border rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <MessageSquare className=\"h-5 w-5 text-green-500\" />\n                              <div>\n                                <FormLabel className=\"text-base font-medium\">WhatsApp Reminders</FormLabel>\n                                <FormDescription>\n                                  Send appointment reminders via WhatsApp Business\n                                </FormDescription>\n                              </div>\n                            </div>\n                            <FormControl>\n                              <Switch\n                                checked={field.value}\n                                onCheckedChange={field.onChange}\n                                data-testid=\"switch-whatsapp-reminders\"\n                              />\n                            </FormControl>\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n\n                  {/* Reminder Timing */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Clock className=\"h-5 w-5\" />\n                        Reminder Timing\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Set when reminders should be sent before each appointment\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"reminderTiming\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <div className=\"space-y-3\">\n                              {/* Current reminder timings */}\n                              <div className=\"flex flex-wrap gap-2\">\n                                {field.value.map((timing) => (\n                                  <Badge\n                                    key={timing}\n                                    variant=\"secondary\"\n                                    className=\"px-3 py-1 flex items-center gap-2\"\n                                  >\n                                    {presetTimings.find(p => p.value === timing)?.label || timing}\n                                    <Button\n                                      type=\"button\"\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      className=\"h-4 w-4 p-0 hover:bg-destructive hover:text-destructive-foreground\"\n                                      onClick={() => removeReminderTiming(timing)}\n                                      data-testid={`remove-timing-${timing}`}\n                                    >\n                                      <X className=\"h-3 w-3\" />\n                                    </Button>\n                                  </Badge>\n                                ))}\n                              </div>\n\n                              {/* Add new timing */}\n                              <div className=\"flex items-center gap-2\">\n                                <Select value={newTiming} onValueChange={setNewTiming}>\n                                  <SelectTrigger className=\"w-48\">\n                                    <SelectValue placeholder=\"Add reminder time\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {presetTimings\n                                      .filter(preset => !field.value.includes(preset.value))\n                                      .map((preset) => (\n                                        <SelectItem key={preset.value} value={preset.value}>\n                                          {preset.label}\n                                        </SelectItem>\n                                      ))}\n                                  </SelectContent>\n                                </Select>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={addReminderTiming}\n                                  disabled={!newTiming}\n                                  data-testid=\"button-add-timing\"\n                                >\n                                  <Plus className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n\n                  {/* Language & Personalization */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Languages className=\"h-5 w-5\" />\n                        Language & Personalization\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Customize the language and messaging for your reminders\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"language\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Reminder Language</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-language\">\n                                  <SelectValue placeholder=\"Select language\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {languageOptions.map((option) => (\n                                  <SelectItem key={option.value} value={option.value}>\n                                    {option.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormDescription>\n                              Choose the language for reminder messages\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customMessage\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Custom Message (Optional)</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                {...field}\n                                placeholder=\"Add a personal touch to your reminders... e.g., 'Thank you for choosing our clinic. We look forward to seeing you!'\"\n                                className=\"min-h-20\"\n                                data-testid=\"textarea-custom-message\"\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              This message will be included in all reminder notifications\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n\n                  {/* Save Button */}\n                  <div className=\"flex justify-end\">\n                    <Button \n                      type=\"submit\" \n                      disabled={savePreferencesMutation.isPending}\n                      className=\"min-w-32\"\n                      data-testid=\"button-save-preferences\"\n                    >\n                      {savePreferencesMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin w-4 h-4 border-2 border-background border-t-transparent rounded-full mr-2\" />\n                          Saving...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          Save Settings\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":19192},"server/services/reminderService.ts":{"content":"import { storage } from \"../storage\";\nimport { format, subHours, subMinutes } from \"date-fns\";\nimport { generateAIResponse } from \"./openai\";\n\nexport class ReminderService {\n  // Parse timing string to hours/minutes before appointment\n  private parseReminderTiming(timing: string): { hours: number; minutes: number } {\n    if (timing.includes('h')) {\n      const hours = parseInt(timing.replace('h', ''));\n      return { hours, minutes: 0 };\n    } else if (timing.includes('min')) {\n      const minutes = parseInt(timing.replace('min', ''));\n      return { hours: 0, minutes };\n    } else if (timing.includes('d')) {\n      const days = parseInt(timing.replace('d', ''));\n      return { hours: days * 24, minutes: 0 };\n    }\n    // Default to 1 hour\n    return { hours: 1, minutes: 0 };\n  }\n\n  // Calculate when reminder should be sent\n  private calculateReminderTime(appointmentTime: Date, timing: string): Date {\n    const { hours, minutes } = this.parseReminderTiming(timing);\n    \n    if (minutes > 0) {\n      return subMinutes(appointmentTime, minutes);\n    } else {\n      return subHours(appointmentTime, hours);\n    }\n  }\n\n  // Generate personalized reminder message using AI\n  private async generateReminderMessage(\n    booking: any,\n    customer: any,\n    preferences: any,\n    reminderType: string\n  ): Promise<string> {\n    const language = preferences.language || 'en';\n    const customMessage = preferences.customMessage;\n    \n    // Language-specific prompts\n    const languagePrompts: Record<string, string> = {\n      'en': 'Generate a friendly appointment reminder in English',\n      'az': 'Generate a friendly appointment reminder in Azerbaijani',\n      'ru': 'Generate a friendly appointment reminder in Russian'\n    };\n\n    const appointmentTime = format(new Date(booking.dateTime), 'PPpp');\n    \n    const prompt = `${languagePrompts[language] || languagePrompts['en']} for:\n    Customer: ${customer?.name || 'Valued Customer'}\n    Service: ${booking.service || 'Appointment'}\n    Date & Time: ${appointmentTime}\n    ${customMessage ? `Custom message to include: ${customMessage}` : ''}\n    \n    Make it warm, professional, and include:\n    - Greeting with customer name\n    - Appointment details (service, date, time)  \n    - Any preparation instructions if relevant\n    - Contact info for changes\n    ${customMessage ? '- Custom message from business' : ''}\n    \n    Keep it concise for ${reminderType} delivery.`;\n\n    try {\n      const response = await generateAIResponse(\n        booking.userId,\n        prompt,\n        [],\n        'Generate appointment reminder message'\n      ); // Generate reminder message\n      return response.message;\n    } catch (error) {\n      console.error('Error generating reminder message:', error);\n      \n      // Fallback messages by language\n      const fallbackMessages: Record<string, string> = {\n        'en': `Hello ${customer?.name || 'there'}! This is a reminder about your ${booking.service || 'appointment'} scheduled for ${appointmentTime}. Please contact us if you need to make any changes.`,\n        'az': `Salam ${customer?.name || 'hörmətli müştəri'}! Bu ${booking.service || 'görüş'} üçün ${appointmentTime} tarixinə təyin olunmuş xatırlatmadır. Dəyişiklik etmək lazım olsa, bizimlə əlaqə saxlayın.`,\n        'ru': `Привет ${customer?.name || 'дорогой клиент'}! Это напоминание о вашем ${booking.service || 'приеме'}, запланированном на ${appointmentTime}. Свяжитесь с нами, если нужно внести изменения.`\n      };\n      \n      return fallbackMessages[language] || fallbackMessages['en'];\n    }\n  }\n\n  // Create reminders for a new booking\n  async createRemindersForBooking(bookingId: string): Promise<void> {\n    try {\n      const booking = await storage.getBooking(bookingId);\n      if (!booking || !booking.dateTime) {\n        console.log('Booking not found or no dateTime:', bookingId);\n        return;\n      }\n\n      const customer = booking.customerId ? await storage.getCustomer(booking.customerId) : null;\n      const preferences = await storage.getUserReminderPreferences(booking.userId);\n\n      // Use default preferences if none exist\n      const defaultPreferences = {\n        userId: booking.userId,\n        emailReminders: true,\n        smsReminders: false,\n        whatsappReminders: false,\n        reminderTiming: ['24h', '1h'],\n        language: 'en',\n      };\n\n      const userPrefs = preferences || defaultPreferences;\n      const appointmentTime = new Date(booking.dateTime);\n      const now = new Date();\n\n      // Create reminders for each enabled type and timing\n      const reminderTypes = [];\n      if (userPrefs.emailReminders && customer?.email) reminderTypes.push('email');\n      if (userPrefs.smsReminders && customer?.phone) reminderTypes.push('sms');\n      if (userPrefs.whatsappReminders && customer?.phone) reminderTypes.push('whatsapp');\n\n      const timings = Array.isArray(userPrefs.reminderTiming) \n        ? userPrefs.reminderTiming \n        : ['24h', '1h'];\n\n      for (const reminderType of reminderTypes) {\n        for (const timing of timings) {\n          const scheduledTime = this.calculateReminderTime(appointmentTime, timing);\n          \n          // Only create reminder if it's in the future\n          if (scheduledTime > now) {\n            const messageContent = await this.generateReminderMessage(\n              booking,\n              customer,\n              userPrefs,\n              reminderType\n            );\n\n            await storage.createBookingReminder({\n              bookingId: booking.id,\n              userId: booking.userId,\n              reminderType,\n              scheduledTime,\n              messageContent,\n              status: 'pending',\n            });\n\n            console.log(`Created ${reminderType} reminder for booking ${bookingId} at ${scheduledTime}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error creating reminders for booking:', error);\n    }\n  }\n\n  // Process pending reminders (called by cron job or scheduler)\n  async processPendingReminders(): Promise<void> {\n    try {\n      const pendingReminders = await storage.getPendingReminders();\n      console.log(`Processing ${pendingReminders.length} pending reminders`);\n\n      for (const reminder of pendingReminders) {\n        try {\n          await this.sendReminder(reminder);\n        } catch (error) {\n          console.error(`Error sending reminder ${reminder.id}:`, error);\n          await storage.updateReminderStatus(\n            reminder.id,\n            'failed',\n            new Date(),\n            error instanceof Error ? error.message : 'Unknown error'\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Error processing pending reminders:', error);\n    }\n  }\n\n  // Send individual reminder\n  private async sendReminder(reminder: any): Promise<void> {\n    const booking = await storage.getBooking(reminder.bookingId);\n    const customer = booking?.customerId ? await storage.getCustomer(booking.customerId) : null;\n\n    if (!booking || !customer) {\n      await storage.updateReminderStatus(reminder.id, 'failed', new Date(), 'Booking or customer not found');\n      return;\n    }\n\n    switch (reminder.reminderType) {\n      case 'email':\n        await this.sendEmailReminder(reminder, booking, customer);\n        break;\n      case 'sms':\n        await this.sendSMSReminder(reminder, booking, customer);\n        break;\n      case 'whatsapp':\n        await this.sendWhatsAppReminder(reminder, booking, customer);\n        break;\n      default:\n        throw new Error(`Unknown reminder type: ${reminder.reminderType}`);\n    }\n\n    await storage.updateReminderStatus(reminder.id, 'sent', new Date());\n    console.log(`Sent ${reminder.reminderType} reminder to ${customer.name}`);\n  }\n\n  private async sendEmailReminder(reminder: any, booking: any, customer: any): Promise<void> {\n    // For now, just log. In production, integrate with email service like SendGrid, Nodemailer, etc.\n    console.log(`📧 EMAIL REMINDER SENT:`);\n    console.log(`To: ${customer.email}`);\n    console.log(`Subject: Appointment Reminder - ${booking.service}`);\n    console.log(`Message: ${reminder.messageContent}`);\n    \n    // TODO: Implement actual email sending\n    // await emailService.send({\n    //   to: customer.email,\n    //   subject: `Appointment Reminder - ${booking.service}`,\n    //   text: reminder.messageContent\n    // });\n  }\n\n  private async sendSMSReminder(reminder: any, booking: any, customer: any): Promise<void> {\n    // For now, just log. In production, integrate with SMS service like Twilio\n    console.log(`📱 SMS REMINDER SENT:`);\n    console.log(`To: ${customer.phone}`);\n    console.log(`Message: ${reminder.messageContent}`);\n    \n    // TODO: Implement actual SMS sending\n    // await smsService.send({\n    //   to: customer.phone,\n    //   message: reminder.messageContent\n    // });\n  }\n\n  private async sendWhatsAppReminder(reminder: any, booking: any, customer: any): Promise<void> {\n    // For now, just log. In production, integrate with WhatsApp Business API\n    console.log(`💬 WHATSAPP REMINDER SENT:`);\n    console.log(`To: ${customer.phone}`);\n    console.log(`Message: ${reminder.messageContent}`);\n    \n    // TODO: Implement actual WhatsApp sending\n    // await whatsappService.send({\n    //   to: customer.phone,\n    //   message: reminder.messageContent\n    // });\n  }\n\n  // Start reminder processing scheduler\n  startReminderScheduler(): void {\n    // Process reminders every 5 minutes\n    setInterval(() => {\n      this.processPendingReminders();\n    }, 5 * 60 * 1000); // 5 minutes\n\n    console.log('Reminder scheduler started - checking every 5 minutes');\n  }\n}\n\nexport const reminderService = new ReminderService();","size_bytes":9843},"client/src/pages/notifications.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Bell, \n  Calendar,\n  MessageSquare,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Settings\n} from \"lucide-react\";\nimport { format, isToday, isTomorrow, isThisWeek } from \"date-fns\";\nimport { Link } from \"wouter\";\n\nexport default function Notifications() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [filter, setFilter] = useState(\"all\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: conversations } = useQuery<any[]>({\n    queryKey: [\"/api/conversations\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: bookings } = useQuery<any[]>({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: reminderPreferences } = useQuery({\n    queryKey: [\"/api/reminder-preferences\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  // Generate notifications from actual data\n  const notifications = [\n    // Upcoming bookings (next 24 hours)\n    ...(Array.isArray(bookings) ? bookings\n      .filter((booking: any) => {\n        if (!booking.dateTime || booking.status === 'cancelled') return false;\n        const bookingDate = new Date(booking.dateTime);\n        const now = new Date();\n        const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\n        return bookingDate >= now && bookingDate <= tomorrow;\n      })\n      .map((booking: any) => ({\n        id: `booking-${booking.id}`,\n        type: 'booking',\n        title: 'Upcoming Appointment',\n        message: `${booking.service || 'Appointment'} with ${booking.customerName || 'customer'}`,\n        time: booking.dateTime,\n        priority: isToday(new Date(booking.dateTime)) ? 'high' : 'medium',\n        status: booking.status,\n      })) : []),\n\n    // Recent conversations (active in last 24 hours)\n    ...(Array.isArray(conversations) ? conversations\n      .filter((conv: any) => {\n        if (conv.status !== 'active') return false;\n        if (!conv.lastMessageAt) return true;\n        const lastMessage = new Date(conv.lastMessageAt);\n        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        return lastMessage > oneDayAgo;\n      })\n      .slice(0, 5) // Limit to 5 recent conversations\n      .map((conv: any) => ({\n        id: `conversation-${conv.id}`,\n        type: 'conversation',\n        title: 'Active Conversation',\n        message: `New activity in ${conv.channelName || conv.channel} conversation`,\n        time: conv.lastMessageAt || conv.createdAt,\n        priority: 'medium',\n        status: conv.status,\n      })) : []),\n\n    // Pending bookings needing confirmation\n    ...(Array.isArray(bookings) ? bookings\n      .filter((booking: any) => booking.status === 'pending')\n      .slice(0, 3) // Limit to 3 pending bookings\n      .map((booking: any) => ({\n        id: `pending-${booking.id}`,\n        type: 'pending',\n        title: 'Booking Needs Confirmation',\n        message: `${booking.service || 'Service'} appointment requires confirmation`,\n        time: booking.createdAt,\n        priority: 'high',\n        status: booking.status,\n      })) : []),\n  ];\n\n  // Sort notifications by priority and time\n  const sortedNotifications = notifications.sort((a, b) => {\n    const priorityOrder = { high: 3, medium: 2, low: 1 };\n    const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] || 1;\n    const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] || 1;\n    \n    if (aPriority !== bPriority) {\n      return bPriority - aPriority;\n    }\n    \n    return new Date(b.time).getTime() - new Date(a.time).getTime();\n  });\n\n  const filteredNotifications = filter === \"all\" \n    ? sortedNotifications \n    : sortedNotifications.filter(n => n.type === filter);\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'booking': return <Calendar className=\"h-5 w-5 text-blue-600\" />;\n      case 'conversation': return <MessageSquare className=\"h-5 w-5 text-green-600\" />;\n      case 'pending': return <AlertCircle className=\"h-5 w-5 text-orange-600\" />;\n      default: return <Bell className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'border-l-red-500 bg-red-50 dark:bg-red-950';\n      case 'medium': return 'border-l-orange-500 bg-orange-50 dark:bg-orange-950';\n      case 'low': return 'border-l-blue-500 bg-blue-50 dark:bg-blue-950';\n      default: return 'border-l-gray-500 bg-gray-50 dark:bg-gray-950';\n    }\n  };\n\n  const getTimeDisplay = (time: string) => {\n    const date = new Date(time);\n    if (isToday(date)) {\n      return `Today ${format(date, 'HH:mm')}`;\n    } else if (isTomorrow(date)) {\n      return `Tomorrow ${format(date, 'HH:mm')}`;\n    } else if (isThisWeek(date)) {\n      return format(date, 'EEEE HH:mm');\n    } else {\n      return format(date, 'MMM dd, HH:mm');\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={false} onToggle={() => {}} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Notifications\" \n          subtitle=\"Stay updated with your AI receptionist activities\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between\">\n              <h1 className=\"text-2xl font-bold text-foreground\">Notifications</h1>\n              <div className=\"flex items-center space-x-4\">\n                <Link href=\"/reminder-settings\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Reminder Settings\n                  </Button>\n                </Link>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => {\n                  toast({\n                    title: \"All notifications marked as read\",\n                    description: \"Your notification list has been cleared.\",\n                  });\n                }}>\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Mark All Read\n                </Button>\n              </div>\n            </div>\n\n            {/* Filter Tabs */}\n            <div className=\"flex space-x-2\">\n              {[\n                { key: \"all\", label: \"All\", count: sortedNotifications.length },\n                { key: \"booking\", label: \"Bookings\", count: sortedNotifications.filter(n => n.type === 'booking').length },\n                { key: \"conversation\", label: \"Conversations\", count: sortedNotifications.filter(n => n.type === 'conversation').length },\n                { key: \"pending\", label: \"Pending\", count: sortedNotifications.filter(n => n.type === 'pending').length },\n              ].map((tab) => (\n                <Button\n                  key={tab.key}\n                  variant={filter === tab.key ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFilter(tab.key)}\n                  data-testid={`filter-${tab.key}`}\n                >\n                  {tab.label}\n                  {tab.count > 0 && (\n                    <Badge variant=\"secondary\" className=\"ml-2\">\n                      {tab.count}\n                    </Badge>\n                  )}\n                </Button>\n              ))}\n            </div>\n\n            {/* Notifications List */}\n            {filteredNotifications.length === 0 ? (\n              <Card>\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <Bell className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                    No notifications\n                  </h3>\n                  <p className=\"text-muted-foreground text-center\">\n                    You're all caught up! New notifications will appear here.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {filteredNotifications.map((notification) => (\n                  <Card \n                    key={notification.id} \n                    className={`border-l-4 ${getPriorityColor(notification.priority)} hover:shadow-md transition-shadow cursor-pointer`}\n                    onClick={() => {\n                      if (notification.type === 'conversation') {\n                        window.location.href = '/conversations';\n                      } else if (notification.type === 'booking' || notification.type === 'pending') {\n                        window.location.href = '/bookings';\n                      }\n                    }}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          {getNotificationIcon(notification.type)}\n                          <div>\n                            <h4 className=\"font-medium text-foreground\" data-testid={`notification-title-${notification.id}`}>\n                              {notification.title}\n                            </h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {notification.message}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                            <span className=\"text-sm text-muted-foreground\">\n                              {getTimeDisplay(notification.time)}\n                            </span>\n                          </div>\n                          {notification.priority === 'high' && (\n                            <Badge variant=\"destructive\" className=\"mt-1\">\n                              Urgent\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Link href=\"/bookings\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      View All Bookings\n                    </Button>\n                  </Link>\n                  <Link href=\"/conversations\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <MessageSquare className=\"h-4 w-4 mr-2\" />\n                      Check Conversations\n                    </Button>\n                  </Link>\n                  <Link href=\"/reminder-settings\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Notification Settings\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":12578},"client/src/pages/schedule-settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Clock, \n  Calendar,\n  Plus,\n  Edit2,\n  Trash2,\n  Save,\n  AlertCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface ScheduleSlot {\n  id: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  isAvailable: boolean;\n  slotDuration: number;\n  maxBookingsPerSlot: number;\n  notes?: string;\n}\n\ninterface SpecialAvailability {\n  id: string;\n  date: string;\n  startTime?: string;\n  endTime?: string;\n  isAvailable: boolean;\n  reason?: string;\n}\n\nconst dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport default function ScheduleSettings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [editingSlot, setEditingSlot] = useState<Partial<ScheduleSlot> | null>(null);\n  const [editingSpecial, setEditingSpecial] = useState<Partial<SpecialAvailability> | null>(null);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: scheduleSlots } = useQuery<ScheduleSlot[]>({\n    queryKey: [\"/api/schedule-slots\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: specialAvailability } = useQuery<SpecialAvailability[]>({\n    queryKey: [\"/api/special-availability\"],\n    enabled: isAuthenticated,\n  });\n\n  const createSlotMutation = useMutation({\n    mutationFn: async (slotData: Partial<ScheduleSlot>) => {\n      return await apiRequest(\"POST\", \"/api/schedule-slots\", slotData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule-slots\"] });\n      setEditingSlot(null);\n      toast({\n        title: \"Schedule Updated\",\n        description: \"Your availability has been saved successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save schedule. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSlotMutation = useMutation({\n    mutationFn: async ({ id, ...slotData }: Partial<ScheduleSlot>) => {\n      return await apiRequest(\"PATCH\", `/api/schedule-slots/${id}`, slotData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule-slots\"] });\n      setEditingSlot(null);\n      toast({\n        title: \"Schedule Updated\",\n        description: \"Your availability has been updated successfully.\",\n      });\n    },\n  });\n\n  const deleteSlotMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/schedule-slots/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule-slots\"] });\n      toast({\n        title: \"Schedule Updated\",\n        description: \"Time slot has been removed.\",\n      });\n    },\n  });\n\n  const createSpecialMutation = useMutation({\n    mutationFn: async (specialData: Partial<SpecialAvailability>) => {\n      return await apiRequest(\"POST\", \"/api/special-availability\", specialData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/special-availability\"] });\n      setEditingSpecial(null);\n      toast({\n        title: \"Special Availability Added\",\n        description: \"Your special hours have been saved.\",\n      });\n    },\n  });\n\n  const deleteSpecialMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/special-availability/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/special-availability\"] });\n      toast({\n        title: \"Removed\",\n        description: \"Special availability has been removed.\",\n      });\n    },\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const handleSaveSlot = () => {\n    if (!editingSlot) return;\n\n    if (editingSlot.id) {\n      updateSlotMutation.mutate(editingSlot as ScheduleSlot);\n    } else {\n      createSlotMutation.mutate(editingSlot);\n    }\n  };\n\n  const handleSaveSpecial = () => {\n    if (!editingSpecial) return;\n    createSpecialMutation.mutate(editingSpecial);\n  };\n\n  const groupedSlots = Array.isArray(scheduleSlots) \n    ? scheduleSlots.reduce((groups, slot) => {\n        if (!groups[slot.dayOfWeek]) {\n          groups[slot.dayOfWeek] = [];\n        }\n        groups[slot.dayOfWeek].push(slot);\n        return groups;\n      }, {} as Record<number, ScheduleSlot[]>)\n    : {};\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={false} onToggle={() => {}} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Schedule Settings\" \n          subtitle=\"Manage your availability and working hours\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2 text-blue-600\" />\n                  Schedule Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {Array.isArray(scheduleSlots) ? scheduleSlots.filter(s => s.isAvailable).length : 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Active Time Slots</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {Array.isArray(specialAvailability) ? specialAvailability.length : 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Special Dates</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {Array.isArray(scheduleSlots) \n                        ? Math.round(scheduleSlots.reduce((sum, slot) => sum + slot.slotDuration, 0) / 60)\n                        : 0}h\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Weekly Hours</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Weekly Schedule */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"h-5 w-5 mr-2 text-green-600\" />\n                  Weekly Schedule\n                </CardTitle>\n                <Button\n                  onClick={() => setEditingSlot({ \n                    dayOfWeek: 1, \n                    startTime: \"09:00\", \n                    endTime: \"17:00\", \n                    isAvailable: true,\n                    slotDuration: 30,\n                    maxBookingsPerSlot: 1\n                  })}\n                  size=\"sm\"\n                  data-testid=\"button-add-time-slot\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Time Slot\n                </Button>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {dayNames.map((dayName, dayIndex) => (\n                    <div key={dayIndex} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h3 className=\"font-medium text-lg\">{dayName}</h3>\n                        <Badge variant={groupedSlots[dayIndex]?.length > 0 ? \"default\" : \"secondary\"}>\n                          {groupedSlots[dayIndex]?.length || 0} slots\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                        {groupedSlots[dayIndex]?.map((slot) => (\n                          <div \n                            key={slot.id} \n                            className={`p-3 border rounded-lg ${slot.isAvailable \n                              ? 'bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800' \n                              : 'bg-gray-50 border-gray-200 dark:bg-gray-900 dark:border-gray-700'\n                            }`}\n                          >\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"font-medium\">\n                                {slot.startTime} - {slot.endTime}\n                              </div>\n                              <div className=\"flex space-x-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => setEditingSlot(slot)}\n                                  data-testid={`button-edit-slot-${slot.id}`}\n                                >\n                                  <Edit2 className=\"h-3 w-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => deleteSlotMutation.mutate(slot.id)}\n                                  data-testid={`button-delete-slot-${slot.id}`}\n                                >\n                                  <Trash2 className=\"h-3 w-3 text-red-500\" />\n                                </Button>\n                              </div>\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {slot.slotDuration}min slots • Max {slot.maxBookingsPerSlot} bookings\n                            </div>\n                            {slot.notes && (\n                              <div className=\"text-xs text-muted-foreground mt-1 italic\">\n                                {slot.notes}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                        \n                        {(!groupedSlots[dayIndex] || groupedSlots[dayIndex].length === 0) && (\n                          <div className=\"p-3 border-2 border-dashed border-gray-300 rounded-lg text-center text-muted-foreground\">\n                            <Clock className=\"h-6 w-6 mx-auto mb-2 text-gray-400\" />\n                            <div className=\"text-sm\">No time slots set</div>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setEditingSlot({ \n                                dayOfWeek: dayIndex, \n                                startTime: \"09:00\", \n                                endTime: \"17:00\", \n                                isAvailable: true,\n                                slotDuration: 30,\n                                maxBookingsPerSlot: 1\n                              })}\n                              className=\"mt-2\"\n                            >\n                              Add Slot\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Special Availability */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <AlertCircle className=\"h-5 w-5 mr-2 text-orange-600\" />\n                  Special Availability & Blackout Dates\n                </CardTitle>\n                <Button\n                  onClick={() => setEditingSpecial({ \n                    date: format(new Date(), \"yyyy-MM-dd\"),\n                    isAvailable: false\n                  })}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  data-testid=\"button-add-special-date\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Special Date\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {Array.isArray(specialAvailability) && specialAvailability.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {specialAvailability.map((special) => (\n                      <div \n                        key={special.id} \n                        className={`p-4 border rounded-lg ${special.isAvailable \n                          ? 'bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800' \n                          : 'bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium flex items-center\">\n                              {special.isAvailable ? (\n                                <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\n                              ) : (\n                                <AlertCircle className=\"h-4 w-4 mr-2 text-red-600\" />\n                              )}\n                              {format(new Date(special.date), \"EEEE, MMMM d, yyyy\")}\n                              {special.startTime && special.endTime && (\n                                <span className=\"ml-2 text-sm text-muted-foreground\">\n                                  {special.startTime} - {special.endTime}\n                                </span>\n                              )}\n                            </div>\n                            {special.reason && (\n                              <div className=\"text-sm text-muted-foreground mt-1\">\n                                {special.reason}\n                              </div>\n                            )}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteSpecialMutation.mutate(special.id)}\n                            data-testid={`button-delete-special-${special.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                    <div className=\"text-lg font-medium mb-2\">No special dates set</div>\n                    <div className=\"text-sm\">Add holidays, vacation days, or special working hours</div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Edit Time Slot Modal */}\n            {editingSlot && (\n              <Card className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n                <div className=\"bg-background border rounded-lg p-6 max-w-md w-full max-h-[90vh] overflow-y-auto\">\n                  <h2 className=\"text-lg font-semibold mb-4\">\n                    {editingSlot.id ? 'Edit Time Slot' : 'Add Time Slot'}\n                  </h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"dayOfWeek\">Day of Week</Label>\n                      <Select \n                        value={editingSlot.dayOfWeek?.toString()} \n                        onValueChange={(value) => setEditingSlot({...editingSlot, dayOfWeek: parseInt(value)})}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select day\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {dayNames.map((day, index) => (\n                            <SelectItem key={index} value={index.toString()}>\n                              {day}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"startTime\">Start Time</Label>\n                        <Input\n                          id=\"startTime\"\n                          type=\"time\"\n                          value={editingSlot.startTime || \"\"}\n                          onChange={(e) => setEditingSlot({...editingSlot, startTime: e.target.value})}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"endTime\">End Time</Label>\n                        <Input\n                          id=\"endTime\"\n                          type=\"time\"\n                          value={editingSlot.endTime || \"\"}\n                          onChange={(e) => setEditingSlot({...editingSlot, endTime: e.target.value})}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"slotDuration\">Slot Duration (minutes)</Label>\n                        <Input\n                          id=\"slotDuration\"\n                          type=\"number\"\n                          min=\"15\"\n                          max=\"180\"\n                          step=\"15\"\n                          value={editingSlot.slotDuration || 30}\n                          onChange={(e) => setEditingSlot({...editingSlot, slotDuration: parseInt(e.target.value)})}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"maxBookings\">Max Bookings</Label>\n                        <Input\n                          id=\"maxBookings\"\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"10\"\n                          value={editingSlot.maxBookingsPerSlot || 1}\n                          onChange={(e) => setEditingSlot({...editingSlot, maxBookingsPerSlot: parseInt(e.target.value)})}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"isAvailable\"\n                        checked={editingSlot.isAvailable || false}\n                        onCheckedChange={(checked) => setEditingSlot({...editingSlot, isAvailable: checked})}\n                      />\n                      <Label htmlFor=\"isAvailable\">Available for bookings</Label>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"notes\">Notes (optional)</Label>\n                      <Textarea\n                        id=\"notes\"\n                        placeholder=\"Special instructions or notes...\"\n                        value={editingSlot.notes || \"\"}\n                        onChange={(e) => setEditingSlot({...editingSlot, notes: e.target.value})}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2 mt-6\">\n                    <Button variant=\"outline\" onClick={() => setEditingSlot(null)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={handleSaveSlot} data-testid=\"button-save-slot\">\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            )}\n\n            {/* Edit Special Availability Modal */}\n            {editingSpecial && (\n              <Card className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n                <div className=\"bg-background border rounded-lg p-6 max-w-md w-full\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Add Special Date</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"specialDate\">Date</Label>\n                      <Input\n                        id=\"specialDate\"\n                        type=\"date\"\n                        value={editingSpecial.date || \"\"}\n                        onChange={(e) => setEditingSpecial({...editingSpecial, date: e.target.value})}\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"isSpecialAvailable\"\n                        checked={editingSpecial.isAvailable || false}\n                        onCheckedChange={(checked) => setEditingSpecial({...editingSpecial, isAvailable: checked})}\n                      />\n                      <Label htmlFor=\"isSpecialAvailable\">\n                        {editingSpecial.isAvailable ? 'Special availability' : 'Blackout date (unavailable)'}\n                      </Label>\n                    </div>\n\n                    {editingSpecial.isAvailable && (\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"specialStartTime\">Start Time (optional)</Label>\n                          <Input\n                            id=\"specialStartTime\"\n                            type=\"time\"\n                            value={editingSpecial.startTime || \"\"}\n                            onChange={(e) => setEditingSpecial({...editingSpecial, startTime: e.target.value})}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"specialEndTime\">End Time (optional)</Label>\n                          <Input\n                            id=\"specialEndTime\"\n                            type=\"time\"\n                            value={editingSpecial.endTime || \"\"}\n                            onChange={(e) => setEditingSpecial({...editingSpecial, endTime: e.target.value})}\n                          />\n                        </div>\n                      </div>\n                    )}\n\n                    <div>\n                      <Label htmlFor=\"specialReason\">Reason</Label>\n                      <Input\n                        id=\"specialReason\"\n                        placeholder=\"Holiday, vacation, special hours...\"\n                        value={editingSpecial.reason || \"\"}\n                        onChange={(e) => setEditingSpecial({...editingSpecial, reason: e.target.value})}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2 mt-6\">\n                    <Button variant=\"outline\" onClick={() => setEditingSpecial(null)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={handleSaveSpecial} data-testid=\"button-save-special\">\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      Save\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":25240},"client/src/pages/booking-approval.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  CheckCircle, \n  XCircle,\n  Clock,\n  Calendar,\n  User,\n  MessageSquare,\n  AlertTriangle,\n  RefreshCw\n} from \"lucide-react\";\nimport { format, formatDistanceToNow } from \"date-fns\";\n\ninterface Booking {\n  id: string;\n  customerId: string;\n  service: string;\n  dateTime: string;\n  status: string;\n  notes: string;\n  customerName?: string;\n  customerPhone?: string;\n  customerEmail?: string;\n  urgencyLevel: string;\n  aiProposedSlots?: any;\n  customerPreference?: string;\n  ownerAction?: string;\n  ownerComment?: string;\n  createdAt: string;\n}\n\nexport default function BookingApproval() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [selectedBooking, setSelectedBooking] = useState<Booking | null>(null);\n  const [actionComment, setActionComment] = useState(\"\");\n  const [filter, setFilter] = useState(\"pending\");\n  const [showRescheduleDialog, setShowRescheduleDialog] = useState(false);\n  const [newDateTime, setNewDateTime] = useState(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: bookings } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: customers } = useQuery<any[]>({\n    queryKey: [\"/api/customers\"],\n    enabled: isAuthenticated,\n  });\n\n  const ownerActionMutation = useMutation({\n    mutationFn: async ({ bookingId, action, comment }: { bookingId: string; action: string; comment?: string }) => {\n      return await apiRequest(\"PATCH\", `/api/bookings/${bookingId}/owner-action`, { action, comment });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      setSelectedBooking(null);\n      setActionComment(\"\");\n      toast({\n        title: \"Action Completed\",\n        description: \"Booking status has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process booking action. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  const filteredBookings = Array.isArray(bookings) \n    ? bookings.filter(booking => {\n        if (filter === \"all\") return true;\n        return booking.status === filter;\n      })\n    : [];\n\n  // Get customer data for a booking\n  const getCustomerForBooking = (customerId: string) => {\n    return Array.isArray(customers) \n      ? customers.find(c => c.id === customerId)\n      : null;\n  };\n\n  const handleOwnerAction = (action: string) => {\n    if (!selectedBooking) return;\n    \n    ownerActionMutation.mutate({\n      bookingId: selectedBooking.id,\n      action,\n      comment: actionComment || undefined\n    });\n  };\n\n  const getUrgencyColor = (level: string) => {\n    switch (level) {\n      case 'urgent': return 'text-red-600 bg-red-100 dark:bg-red-950';\n      case 'normal': return 'text-blue-600 bg-blue-100 dark:bg-blue-950';\n      case 'low': return 'text-gray-600 bg-gray-100 dark:bg-gray-950';\n      default: return 'text-blue-600 bg-blue-100 dark:bg-blue-950';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-950 dark:text-yellow-200';\n      case 'confirmed': return 'bg-green-100 text-green-800 dark:bg-green-950 dark:text-green-200';\n      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-950 dark:text-red-200';\n      case 'rescheduled': return 'bg-purple-100 text-purple-800 dark:bg-purple-950 dark:text-purple-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-950 dark:text-gray-200';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar isOpen={false} onToggle={() => {}} />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Booking Approvals\" \n          subtitle=\"Review and manage pending booking requests\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6 space-y-6\">\n            {/* Overview Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {filteredBookings.filter(b => b.status === 'pending').length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Pending</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {filteredBookings.filter(b => b.urgencyLevel === 'urgent').length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Urgent</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {filteredBookings.filter(b => b.status === 'confirmed').length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Confirmed</div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {filteredBookings.length}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filter Tabs */}\n            <Tabs value={filter} onValueChange={setFilter}>\n              <TabsList>\n                <TabsTrigger value=\"pending\">Pending ({filteredBookings.filter(b => b.status === 'pending').length})</TabsTrigger>\n                <TabsTrigger value=\"confirmed\">Confirmed</TabsTrigger>\n                <TabsTrigger value=\"cancelled\">Cancelled</TabsTrigger>\n                <TabsTrigger value=\"all\">All Bookings</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value={filter} className=\"mt-6\">\n                {filteredBookings.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                      <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                        No {filter} bookings\n                      </h3>\n                      <p className=\"text-muted-foreground text-center\">\n                        {filter === 'pending' \n                          ? \"All caught up! No pending bookings require your attention.\"\n                          : `No ${filter} bookings found.`\n                        }\n                      </p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n                    {filteredBookings.map((booking) => {\n                      const customer = getCustomerForBooking(booking.customerId);\n                      \n                      return (\n                        <Card \n                          key={booking.id}\n                          className={`cursor-pointer transition-all hover:shadow-lg border-l-4 ${\n                            booking.urgencyLevel === 'urgent' \n                              ? 'border-l-red-500' \n                              : booking.status === 'pending'\n                                ? 'border-l-yellow-500'\n                                : 'border-l-blue-500'\n                          }`}\n                          onClick={() => setSelectedBooking(booking)}\n                        >\n                          <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <CardTitle className=\"text-base font-medium\">\n                                {booking.service || 'General Appointment'}\n                              </CardTitle>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge className={getStatusColor(booking.status)}>\n                                  {booking.status}\n                                </Badge>\n                                {booking.urgencyLevel === 'urgent' && (\n                                  <Badge className={getUrgencyColor(booking.urgencyLevel)}>\n                                    <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                                    Urgent\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                          </CardHeader>\n                          \n                          <CardContent className=\"space-y-3\">\n                            {/* Customer Info */}\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <User className=\"h-4 w-4 mr-2\" />\n                              <span>{customer?.name || 'Unknown Customer'}</span>\n                            </div>\n\n                            {/* Date & Time */}\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Calendar className=\"h-4 w-4 mr-2\" />\n                              <span>\n                                {booking.dateTime \n                                  ? format(new Date(booking.dateTime), 'MMM dd, yyyy HH:mm')\n                                  : 'No specific time'\n                                }\n                              </span>\n                            </div>\n\n                            {/* Time Since Created */}\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Clock className=\"h-4 w-4 mr-2\" />\n                              <span>\n                                {formatDistanceToNow(new Date(booking.createdAt), { addSuffix: true })}\n                              </span>\n                            </div>\n\n                            {/* Customer Preference */}\n                            {booking.customerPreference && (\n                              <div className=\"text-sm\">\n                                <div className=\"flex items-center text-muted-foreground mb-1\">\n                                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                                  Customer Request:\n                                </div>\n                                <div className=\"text-foreground italic bg-muted p-2 rounded text-xs\">\n                                  \"{booking.customerPreference}\"\n                                </div>\n                              </div>\n                            )}\n\n                            {/* Notes */}\n                            {booking.notes && (\n                              <div className=\"text-xs text-muted-foreground bg-muted p-2 rounded\">\n                                {booking.notes}\n                              </div>\n                            )}\n\n                            {/* Quick Actions for Pending */}\n                            {booking.status === 'pending' && (\n                              <div className=\"flex space-x-2 pt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  className=\"flex-1\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBooking(booking);\n                                    setTimeout(() => handleOwnerAction('approve'), 100);\n                                  }}\n                                  data-testid={`button-approve-${booking.id}`}\n                                >\n                                  <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                  Approve\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"flex-1\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setSelectedBooking(booking);\n                                  }}\n                                  data-testid={`button-review-${booking.id}`}\n                                >\n                                  Review\n                                </Button>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n\n            {/* Reschedule Dialog */}\n            {showRescheduleDialog && selectedBooking && (\n              <Card className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n                <div className=\"bg-background border rounded-lg p-6 max-w-md w-full\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold\">Reschedule Booking</h3>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n                      setShowRescheduleDialog(false);\n                      setNewDateTime(\"\");\n                    }}>\n                      ✕\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label>Current Time</Label>\n                      <div className=\"text-sm bg-muted p-2 rounded\">\n                        {selectedBooking.dateTime \n                          ? format(new Date(selectedBooking.dateTime), 'EEEE, MMMM dd, yyyy \\'at\\' HH:mm')\n                          : 'No specific time requested'\n                        }\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"newDateTime\">New Date & Time</Label>\n                      <Input\n                        id=\"newDateTime\"\n                        type=\"datetime-local\"\n                        value={newDateTime}\n                        onChange={(e) => setNewDateTime(e.target.value)}\n                        className=\"mt-1\"\n                        min={new Date().toISOString().slice(0, 16)}\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"rescheduleComment\">Reason for Rescheduling</Label>\n                      <Textarea\n                        id=\"rescheduleComment\"\n                        placeholder=\"Explain why you need to reschedule (this will be sent to the customer)...\"\n                        value={actionComment}\n                        onChange={(e) => setActionComment(e.target.value)}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    \n                    <div className=\"flex space-x-3\">\n                      <Button\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => {\n                          setShowRescheduleDialog(false);\n                          setNewDateTime(\"\");\n                          setActionComment(\"\");\n                        }}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        className=\"flex-1\"\n                        onClick={() => {\n                          if (newDateTime) {\n                            const rescheduleComment = `${actionComment}${actionComment ? ' ' : ''}New time: ${format(new Date(newDateTime), 'EEEE, MMMM dd, yyyy \\'at\\' HH:mm')}`;\n                            setActionComment(rescheduleComment);\n                            handleOwnerAction('reschedule');\n                            setShowRescheduleDialog(false);\n                            setNewDateTime(\"\");\n                          }\n                        }}\n                        disabled={!newDateTime || ownerActionMutation.isPending}\n                      >\n                        Confirm Reschedule\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            )}\n\n            {/* Booking Detail Modal */}\n            {selectedBooking && !showRescheduleDialog && (\n              <Card className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n                <div className=\"bg-background border rounded-lg p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-xl font-semibold\">\n                      {selectedBooking.service || 'Booking Details'}\n                    </h2>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedBooking(null)}>\n                      ✕\n                    </Button>\n                  </div>\n                  \n                  <div className=\"space-y-6\">\n                    {/* Customer Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Customer Name</Label>\n                        <div className=\"text-sm bg-muted p-2 rounded\">\n                          {getCustomerForBooking(selectedBooking.customerId)?.name || 'Unknown'}\n                        </div>\n                      </div>\n                      <div>\n                        <Label>Contact</Label>\n                        <div className=\"text-sm bg-muted p-2 rounded\">\n                          {getCustomerForBooking(selectedBooking.customerId)?.phone || \n                           getCustomerForBooking(selectedBooking.customerId)?.email || 'No contact info'}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Appointment Details */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Date & Time</Label>\n                        <div className=\"text-sm bg-muted p-2 rounded\">\n                          {selectedBooking.dateTime \n                            ? format(new Date(selectedBooking.dateTime), 'EEEE, MMMM dd, yyyy \\'at\\' HH:mm')\n                            : 'No specific time requested'\n                          }\n                        </div>\n                      </div>\n                      <div>\n                        <Label>Status & Urgency</Label>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge className={getStatusColor(selectedBooking.status)}>\n                            {selectedBooking.status}\n                          </Badge>\n                          <Badge className={getUrgencyColor(selectedBooking.urgencyLevel)}>\n                            {selectedBooking.urgencyLevel}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Customer Request */}\n                    {selectedBooking.customerPreference && (\n                      <div>\n                        <Label>Customer's Original Request</Label>\n                        <div className=\"text-sm bg-blue-50 dark:bg-blue-950 p-3 rounded border-l-4 border-blue-500\">\n                          \"{selectedBooking.customerPreference}\"\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Notes */}\n                    {selectedBooking.notes && (\n                      <div>\n                        <Label>System Notes</Label>\n                        <div className=\"text-sm bg-muted p-3 rounded\">\n                          {selectedBooking.notes}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Previous Owner Action */}\n                    {selectedBooking.ownerAction && (\n                      <div>\n                        <Label>Previous Action</Label>\n                        <div className=\"text-sm bg-gray-50 dark:bg-gray-950 p-3 rounded\">\n                          <div className=\"font-medium\">Action: {selectedBooking.ownerAction}</div>\n                          {selectedBooking.ownerComment && (\n                            <div className=\"mt-1 text-muted-foreground\">\n                              Comment: {selectedBooking.ownerComment}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Action Comment */}\n                    <div>\n                      <Label htmlFor=\"actionComment\">\n                        Action Comment {selectedBooking.status === 'pending' ? '(Optional)' : '(Required for rejection/rescheduling)'}\n                      </Label>\n                      <Textarea\n                        id=\"actionComment\"\n                        placeholder=\"Add a comment about your decision (this will be communicated to the customer)...\"\n                        value={actionComment}\n                        onChange={(e) => setActionComment(e.target.value)}\n                        className=\"mt-1\"\n                      />\n                    </div>\n\n                    {/* Action Buttons */}\n                    {selectedBooking.status === 'pending' && (\n                      <div className=\"flex flex-col sm:flex-row gap-3\">\n                        <Button\n                          className=\"flex-1\"\n                          onClick={() => handleOwnerAction('approve')}\n                          disabled={ownerActionMutation.isPending}\n                          data-testid=\"button-approve-booking\"\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Approve Booking\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          className=\"flex-1\"\n                          onClick={() => setShowRescheduleDialog(true)}\n                          disabled={ownerActionMutation.isPending}\n                          data-testid=\"button-reschedule-booking\"\n                        >\n                          <RefreshCw className=\"h-4 w-4 mr-2\" />\n                          Reschedule\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          className=\"flex-1\"\n                          onClick={() => handleOwnerAction('reject')}\n                          disabled={ownerActionMutation.isPending}\n                          data-testid=\"button-reject-booking\"\n                        >\n                          <XCircle className=\"h-4 w-4 mr-2\" />\n                          Reject\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":25073},"server/services/notificationService.ts":{"content":"import { storage } from \"../storage\";\nimport { generateAIResponse } from \"./openai\";\n\ninterface TelegramMessage {\n  chat_id: string;\n  text: string;\n  parse_mode?: string;\n}\n\nasync function sendTelegramMessage(botToken: string, message: TelegramMessage): Promise<boolean> {\n  try {\n    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(message),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Telegram API error:', response.status, errorText);\n      return false;\n    }\n\n    console.log('Message sent to Telegram successfully');\n    return true;\n  } catch (error) {\n    console.error('Error sending Telegram message:', error);\n    return false;\n  }\n}\n\nexport async function notifyCustomerOfBookingAction(\n  bookingId: string, \n  action: string, \n  ownerComment?: string\n): Promise<boolean> {\n  try {\n    console.log(`🔔 Notifying customer of booking action: ${action} for booking ${bookingId}`);\n    \n    // Get booking details\n    const booking = await storage.getBooking(bookingId);\n    if (!booking) {\n      console.error('❌ Booking not found:', bookingId);\n      return false;\n    }\n    console.log(`✅ Found booking:`, { id: booking.id, service: booking.service, customerId: booking.customerId });\n\n    // Get customer details\n    const customer = booking.customerId ? await storage.getCustomer(booking.customerId) : null;\n    if (!customer) {\n      console.error('❌ Customer not found:', booking.customerId);\n      return false;\n    }\n    console.log(`✅ Found customer:`, { id: customer.id, name: customer.name, metadata: customer.metadata });\n\n    // Get conversation details\n    const conversation = booking.conversationId ? await storage.getConversation(booking.conversationId) : null;\n    if (!conversation) {\n      console.error('❌ Conversation not found:', booking.conversationId);\n      return false;\n    }\n    console.log(`✅ Found conversation:`, { id: conversation.id, channel: conversation.channel });\n\n    // Get channel configuration to determine how to send the message\n    const channel = await storage.getChannel(conversation.channel);\n    if (!channel) {\n      console.error('❌ Channel not found:', conversation.channel);\n      return false;\n    }\n    console.log(`✅ Found channel:`, { id: channel.id, type: channel.type, name: channel.name });\n\n    // Only handle Telegram for now\n    if (channel.type !== 'telegram') {\n      console.log('Non-Telegram channel, skipping notification:', channel.type);\n      return false;\n    }\n\n    // Get channel config for bot token\n    const config = typeof channel.config === 'string' ? JSON.parse(channel.config) : (channel.config || {});\n    const botToken = config.botToken;\n    if (!botToken) {\n      console.error('No bot token configured for Telegram channel');\n      return false;\n    }\n\n    // Get customer's Telegram chat ID  \n    const metadata = customer.metadata as any;\n    const chatId = metadata?.identifier;\n    if (!chatId) {\n      console.error('❌ No Telegram chat ID found for customer. Metadata:', metadata);\n      return false;\n    }\n    console.log(`✅ Found Telegram chat ID: ${chatId}`);\n\n    // Generate AI response based on the owner action\n    const aiPrompt = createBookingActionPrompt(booking, action, ownerComment);\n    const conversationHistory = await storage.getMessagesByConversation(conversation.id);\n    const chatHistory = conversationHistory.map(m => ({\n      role: m.sender === 'customer' ? 'user' as const : 'assistant' as const,\n      content: m.content,\n    }));\n\n    const aiResponse = await generateAIResponse(\n      booking.userId,\n      aiPrompt,\n      chatHistory,\n      `Booking ${action} notification`\n    );\n\n    // Send the AI message to customer via Telegram\n    const telegramMessage: TelegramMessage = {\n      chat_id: chatId,\n      text: aiResponse.message,\n      parse_mode: 'HTML'\n    };\n\n    console.log(`🚀 Sending Telegram message:`, { chatId, message: aiResponse.message.substring(0, 100) + '...' });\n    const sent = await sendTelegramMessage(botToken, telegramMessage);\n    \n    if (sent) {\n      // Store the AI message in conversation history\n      await storage.createMessage({\n        conversationId: conversation.id,\n        content: aiResponse.message,\n        sender: 'ai',\n        metadata: { \n          action: 'booking_notification', \n          ownerAction: action,\n          bookingId: bookingId \n        },\n      });\n\n      // Update conversation last message time\n      await storage.updateConversationStatus(conversation.id, 'active');\n\n      console.log(`✅ Successfully notified customer of ${action} action via Telegram`);\n      return true;\n    } else {\n      console.error(`❌ Failed to send Telegram message to ${chatId}`);\n    }\n\n    return false;\n  } catch (error) {\n    console.error('Error notifying customer of booking action:', error);\n    return false;\n  }\n}\n\nfunction createBookingActionPrompt(booking: any, action: string, ownerComment?: string): string {\n  const serviceName = booking.service || 'appointment';\n  const dateTime = booking.dateTime ? new Date(booking.dateTime).toLocaleString() : 'your requested time';\n  \n  switch (action) {\n    case 'approve':\n      return `The business owner has APPROVED your ${serviceName} booking for ${dateTime}. Please confirm this good news to the customer and provide any next steps or instructions.`;\n    \n    case 'reject':\n      return `The business owner has REJECTED your ${serviceName} booking for ${dateTime}. ${ownerComment ? `Reason: ${ownerComment}` : ''} Please politely inform the customer and offer alternative solutions or times.`;\n    \n    case 'reschedule':\n      return `The business owner needs to RESCHEDULE your ${serviceName} booking from ${dateTime}. ${ownerComment ? `Details: ${ownerComment}` : ''} Please inform the customer and help them find a new suitable time.`;\n    \n    default:\n      return `There has been an update to your ${serviceName} booking. Please inform the customer about the status change.`;\n  }\n}","size_bytes":6168},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Brain, \n  Bell, \n  Calendar,\n  Bot,\n  Settings as SettingsIcon,\n  ChevronRight,\n  User,\n  Shield,\n  Palette\n} from \"lucide-react\";\n\ninterface SettingsCard {\n  title: string;\n  description: string;\n  href: string;\n  icon: any;\n  badge?: string;\n}\n\nconst settingsCards: SettingsCard[] = [\n  {\n    title: \"AI Settings\",\n    description: \"Configure AI responses, training data, and conversation behavior\",\n    href: \"/ai-settings\",\n    icon: Brain,\n  },\n  {\n    title: \"Reminder Settings\",\n    description: \"Set up email and SMS reminders for appointments and follow-ups\",\n    href: \"/reminder-settings\", \n    icon: Bell,\n  },\n  {\n    title: \"Schedule Settings\",\n    description: \"Manage your availability, working hours, and booking preferences\",\n    href: \"/schedule-settings\",\n    icon: Calendar,\n  },\n];\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  if (!isLoading && !isAuthenticated) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <Sidebar isOpen={sidebarOpen} onToggle={() => setSidebarOpen(!sidebarOpen)} />\n        \n        <main className=\"flex-1 lg:ml-0\">\n          <Header \n            title=\"Settings\" \n            subtitle=\"Manage your AI Receptionist configuration\"\n            onMenuToggle={() => setSidebarOpen(!sidebarOpen)}\n          />\n          \n          <div className=\"p-6\">\n            {/* Settings Overview */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                  <SettingsIcon className=\"w-5 h-5 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-foreground\">Settings</h1>\n                  <p className=\"text-muted-foreground\">\n                    Configure your AI Receptionist to match your business needs\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Account Information */}\n            <Card className=\"mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"h-5 w-5 mr-2\" />\n                  Account Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Business Name</label>\n                    <p className=\"text-foreground mt-1\">\n                      {(user as any)?.businessName || `${(user as any)?.firstName || \"User\"}'s Business`}\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                    <p className=\"text-foreground mt-1\">{(user as any)?.email || \"Not provided\"}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Plan</label>\n                    <p className=\"text-foreground mt-1\">\n                      {(user as any)?.subscriptionStatus === 'active' ? 'Pro Plan' : 'Free Trial'}\n                    </p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">User ID</label>\n                    <p className=\"text-foreground mt-1 text-sm font-mono\">{(user as any)?.id}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Settings Categories */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {settingsCards.map((setting) => (\n                <Link key={setting.href} href={setting.href}>\n                  <Card className=\"cursor-pointer transition-all hover:shadow-lg hover:border-primary/50 group\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center group-hover:bg-primary group-hover:text-primary-foreground transition-colors\">\n                            <setting.icon className=\"w-5 h-5 text-primary group-hover:text-primary-foreground\" />\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-base font-medium\">\n                              {setting.title}\n                            </CardTitle>\n                            {setting.badge && (\n                              <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded-full mt-1 inline-block\">\n                                {setting.badge}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                        <ChevronRight className=\"h-4 w-4 text-muted-foreground group-hover:text-primary transition-colors\" />\n                      </div>\n                    </CardHeader>\n                    \n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {setting.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"mt-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bot className=\"h-5 w-5 mr-2\" />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Link href=\"/ai-settings\">\n                    <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                      <Brain className=\"h-4 w-4 mr-2\" />\n                      Train AI\n                    </Button>\n                  </Link>\n                  <Link href=\"/schedule-settings\">\n                    <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      Set Availability\n                    </Button>\n                  </Link>\n                  <Link href=\"/reminder-settings\">\n                    <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                      <Bell className=\"h-4 w-4 mr-2\" />\n                      Configure Reminders\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":7711}},"version":1}